var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as fs from 'node:fs/promises';
import path from 'node:path';
import { RepopackError } from '../shared/errorHandler.js';
import { logger } from '../shared/logger.js';
import { RepopackConfigValidationError, validateConfig } from './configValidator.js';
import { defaultConfig } from './defaultConfig.js';
import { getGlobalDirectory } from './globalDirectory.js';
const defaultConfigPath = 'repopack.config.json';
const getGlobalConfigPath = () => {
    return path.join(getGlobalDirectory(), 'repopack.config.json');
};
export const loadFileConfig = (rootDir, argConfigPath) => __awaiter(void 0, void 0, void 0, function* () {
    let useDefaultConfig = false;
    let configPath = argConfigPath;
    if (!configPath) {
        useDefaultConfig = true;
        configPath = defaultConfigPath;
    }
    const fullPath = path.resolve(rootDir, configPath);
    logger.trace('Loading local config from:', fullPath);
    // Check local file existence
    const isLocalFileExists = yield fs
        .stat(fullPath)
        .then((stats) => stats.isFile())
        .catch(() => false);
    if (isLocalFileExists) {
        return yield loadAndValidateConfig(fullPath);
    }
    if (useDefaultConfig) {
        // Try to load global config
        const globalConfigPath = getGlobalConfigPath();
        logger.trace('Loading global config from:', globalConfigPath);
        const isGlobalFileExists = yield fs
            .stat(globalConfigPath)
            .then((stats) => stats.isFile())
            .catch(() => false);
        if (isGlobalFileExists) {
            return yield loadAndValidateConfig(globalConfigPath);
        }
        logger.note(`No custom config found at ${configPath} or global config at ${globalConfigPath}.\nYou can add a config file for additional settings. Please check https://github.com/yamadashy/repopack for more information.`);
        return {};
    }
    throw new RepopackError(`Config file not found at ${configPath}`);
});
const loadAndValidateConfig = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const fileContent = yield fs.readFile(filePath, 'utf-8');
        const config = JSON.parse(fileContent);
        validateConfig(config);
        return config;
    }
    catch (error) {
        if (error instanceof RepopackConfigValidationError) {
            throw new RepopackError(`Invalid configuration in ${filePath}: ${error.message}`);
        }
        if (error instanceof SyntaxError) {
            throw new RepopackError(`Invalid JSON in config file ${filePath}: ${error.message}`);
        }
        if (error instanceof Error) {
            throw new RepopackError(`Error loading config from ${filePath}: ${error.message}`);
        }
        throw new RepopackError(`Error loading config from ${filePath}`);
    }
});
export const mergeConfigs = (cwd, fileConfig, cliConfig) => {
    var _a, _b;
    return ({
        cwd,
        output: Object.assign(Object.assign(Object.assign({}, defaultConfig.output), fileConfig.output), cliConfig.output),
        ignore: Object.assign(Object.assign(Object.assign(Object.assign({}, defaultConfig.ignore), fileConfig.ignore), cliConfig.ignore), { customPatterns: [
                ...(defaultConfig.ignore.customPatterns || []),
                ...(((_a = fileConfig.ignore) === null || _a === void 0 ? void 0 : _a.customPatterns) || []),
                ...(((_b = cliConfig.ignore) === null || _b === void 0 ? void 0 : _b.customPatterns) || []),
            ] }),
        include: [...(defaultConfig.include || []), ...(fileConfig.include || []), ...(cliConfig.include || [])],
        security: Object.assign(Object.assign(Object.assign({}, defaultConfig.security), fileConfig.security), cliConfig.security),
    });
};
//# sourceMappingURL=configLoader.js.map