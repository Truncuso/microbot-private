var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { globby } from 'globby';
import { defaultIgnoreList } from '../../config/defaultIgnore.js';
import { logger } from '../../shared/logger.js';
import { sortPaths } from './filePathSorter.js';
export const searchFiles = (rootDir, config) => __awaiter(void 0, void 0, void 0, function* () {
    const includePatterns = config.include.length > 0 ? config.include : ['**/*'];
    const ignorePatterns = yield getIgnorePatterns(rootDir, config);
    const ignoreFilePatterns = yield getIgnoreFilePatterns(config);
    logger.trace('Include patterns:', includePatterns);
    logger.trace('Ignore patterns:', ignorePatterns);
    logger.trace('Ignore file patterns: ', ignoreFilePatterns);
    try {
        const filePaths = yield globby(includePatterns, {
            cwd: rootDir,
            ignore: ignorePatterns,
            ignoreFiles: ignoreFilePatterns,
            // result options
            onlyFiles: true,
            absolute: false,
            // glob options
            dot: true,
            followSymbolicLinks: false,
        });
        logger.trace(`Filtered ${filePaths.length} files`);
        // Sort the filtered paths
        const sortedPaths = sortPaths(filePaths);
        return sortedPaths;
    }
    catch (error) {
        logger.error('Error filtering files:', error);
        throw new Error('Failed to filter files');
    }
});
export const parseIgnoreContent = (content) => content
    .split('\n')
    .map((line) => line.trim())
    .filter((line) => line && !line.startsWith('#'));
export const getIgnoreFilePatterns = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const ignoreFilePatterns = [];
    if (config.ignore.useGitignore) {
        ignoreFilePatterns.push('**/.gitignore');
    }
    ignoreFilePatterns.push('**/.repopackignore');
    return ignoreFilePatterns;
});
export const getIgnorePatterns = (rootDir, config) => __awaiter(void 0, void 0, void 0, function* () {
    let ignorePatterns = [];
    // Add default ignore patterns
    if (config.ignore.useDefaultPatterns) {
        logger.trace('Adding default ignore patterns');
        ignorePatterns = [...ignorePatterns, ...defaultIgnoreList];
    }
    // Add repopack output file
    if (config.output.filePath) {
        logger.trace('Adding output file to ignore patterns:', config.output.filePath);
        ignorePatterns.push(config.output.filePath);
    }
    // Add custom ignore patterns
    if (config.ignore.customPatterns) {
        logger.trace('Adding default custom ignore patterns: ', config.ignore.customPatterns);
        ignorePatterns = [...ignorePatterns, ...config.ignore.customPatterns];
    }
    return ignorePatterns;
});
//# sourceMappingURL=fileSearcher.js.map