var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from 'node:fs/promises';
import path from 'node:path';
import { RepopackError } from '../../shared/errorHandler.js';
import { generateTreeString } from '../file/fileTreeGenerator.js';
import { generatePlainStyle } from './plainStyleGenerator.js';
import { generateXmlStyle } from './xmlStyleGenerator.js';
export const generateOutput = (rootDir, config, processedFiles, allFilePaths) => __awaiter(void 0, void 0, void 0, function* () {
    const outputGeneratorContext = yield buildOutputGeneratorContext(rootDir, config, allFilePaths, processedFiles);
    let output;
    switch (config.output.style) {
        case 'xml':
            output = generateXmlStyle(outputGeneratorContext);
            break;
        default:
            output = generatePlainStyle(outputGeneratorContext);
    }
    return output;
});
export const buildOutputGeneratorContext = (rootDir, config, allFilePaths, processedFiles) => __awaiter(void 0, void 0, void 0, function* () {
    let repositoryInstruction = '';
    if (config.output.instructionFilePath) {
        const instructionPath = path.resolve(rootDir, config.output.instructionFilePath);
        try {
            repositoryInstruction = yield fs.readFile(instructionPath, 'utf-8');
        }
        catch (_a) {
            throw new RepopackError(`Instruction file not found at ${instructionPath}`);
        }
    }
    return {
        generationDate: new Date().toISOString(),
        treeString: generateTreeString(allFilePaths),
        processedFiles,
        config,
        instruction: repositoryInstruction,
    };
});
//# sourceMappingURL=outputGenerator.js.map