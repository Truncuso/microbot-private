This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-24T15:06:58.600Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
runelite-client/
  src/
    main/
      java/
        net/
          runelite/
            client/
              plugins/
                microbot/
                  example/
                    ExampleConfig.java
                    ExampleOverlay.java
                    ExamplePlugin.java
                    ExampleScript.java
                VoxSylvaePlugins/
                  data/
                    locationData/
                      ancientMagicksTeleports.json
                      arceuusTeleports.json
                      fairyRingTeleports.json
                      JewelryTeleport.java
                      jewelryTeleports.json
                      lunarMagicTeleports.json
                      POHTeleportOptions.json
                      teleportationSpells.json
                  skilling/
                    hunter/
                      VoxSylvaeAIOHunter/
                        data/
                          hunterCreatureData.json
                        AIOHunterConfig.java
                        AIOHunterOverlay.java
                        AIOHunterTaskManager.java
                        CreatureLocation.java
                        HunterCreature.java
                        HunterMaster.java
                        HuntersRumoursPlugin.java
                        HuntersRumoursScript.java
                  util/
                    navigation/
                      VoxSylvaeNavigationOverlay.java
                      VoxSylvaeNavigationScript.java
                    teleport/
                      FairyRingTeleport.java
                      ItemTeleport.java
                      JewelryTeleport.java
                      POHTeleport.java
                      Teleport.java
                      TeleportType.java
                    TeleportationManager.java
                    VoxSylvaeInventoryManagementUtil.java
                    VoxSylvaeUtil.java

================================================================
Repository Files
================================================================

================
File: runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/ExampleConfig.java
================
package net.runelite.client.plugins.microbot.example;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
@ConfigGroup("example")
public interface ExampleConfig extends Config {
/*    @ConfigItem(
            keyName = "Ore",
            name = "Ore",
            description = "Choose the ore",
            position = 0
    )
    default List<String> ORE()
    {
        return Rocks.TIN;
    }*/
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/ExampleOverlay.java
================
package net.runelite.client.plugins.microbot.example;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import javax.inject.Inject;
import javax.inject.Named;
import java.awt.*;
public class ExampleOverlay extends OverlayPanel {
    @Inject
    ExampleOverlay(ExamplePlugin plugin)
    {
        super(plugin);
        setPosition(OverlayPosition.TOP_LEFT);
        setNaughty();
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        try {
            panelComponent.setPreferredSize(new Dimension(200, 300));
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("Micro Example V1.0.0")
                    .color(Color.GREEN)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder().build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left(Microbot.status)
                    .build());
        } catch(Exception ex) {
            System.out.println(ex.getMessage());
        }
        return super.render(graphics);
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/ExamplePlugin.java
================
package net.runelite.client.plugins.microbot.example;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.events.GameTick;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import javax.inject.Inject;
import java.awt.*;
@PluginDescriptor(
        name = PluginDescriptor.Default + "Example",
        description = "Microbot example plugin",
        tags = {"example", "microbot"},
        enabledByDefault = false
)
@Slf4j
public class ExamplePlugin extends Plugin {
    @Inject
    private ExampleConfig config;
    @Provides
    ExampleConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(ExampleConfig.class);
    }
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private ExampleOverlay exampleOverlay;
    @Inject
    ExampleScript exampleScript;
    @Override
    protected void startUp() throws AWTException {
        if (overlayManager != null) {
            overlayManager.add(exampleOverlay);
        }
        exampleScript.run(config);
    }
    protected void shutDown() {
        exampleScript.shutdown();
        overlayManager.remove(exampleOverlay);
    }
    int ticks = 10;
    @Subscribe
    public void onGameTick(GameTick tick)
    {
        //System.out.println(getName().chars().mapToObj(i -> (char)(i + 3)).map(String::valueOf).collect(Collectors.joining()));
        if (ticks > 0) {
            ticks--;
        } else {
            ticks = 10;
        }
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/microbot/example/ExampleScript.java
================
package net.runelite.client.plugins.microbot.example;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.Script;
import net.runelite.client.plugins.microbot.util.grounditem.LootingParameters;
import net.runelite.client.plugins.microbot.util.grounditem.Rs2GroundItem;
import java.util.concurrent.TimeUnit;
public class ExampleScript extends Script {
    public static boolean test = false;
    public boolean run(ExampleConfig config) {
        Microbot.enableAutoRunOn = false;
        mainScheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(() -> {
            try {
                if (!Microbot.isLoggedIn()) return;
                if (!super.run()) return;
                long startTime = System.currentTimeMillis();
                test = false;
                LootingParameters valueParams = new LootingParameters(
                        5000,
                        Integer.MAX_VALUE,
                        20,
                        1,
                        0,
                        false,
                        false
                );
                Rs2GroundItem.loot("Vorkath's head", 20);
                if (Rs2GroundItem.lootItemBasedOnValue(valueParams)) {
                    System.out.println("Looing succesfull!");
                }
                /*for (int i = 0; i < 2; i++) {
                    System.out.println("loop:= " + i);
                    Rs2Inventory.waitForInventoryChanges();
                }*/
                long endTime = System.currentTimeMillis();
                long totalTime = endTime - startTime;
                System.out.println("Total time for loop " + totalTime);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }, 0, 1000, TimeUnit.MILLISECONDS);
        return true;
    }
    @Override
    public void shutdown() {
        super.shutdown();
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/ancientMagicksTeleports.json
================
{
  "ancient_magicks_teleports": [
    {
      "name": "Paddewwa Teleport",
      "location": "Edgeville Dungeon",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 3098,
        "y": 9882,
        "z": 0
      },
      "requirements": {
        "magic_level": 54,
        "runes": {
          "law": 2,
          "fire": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Senntisten Teleport",
      "location": "Senntisten",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 3321,
        "y": 3335,
        "z": 0
      },
      "requirements": {
        "magic_level": 60,
        "runes": {
          "law": 2,
          "soul": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Kharyrll Teleport",
      "location": "Canifis",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 3493,
        "y": 3472,
        "z": 0
      },
      "requirements": {
        "magic_level": 66,
        "runes": {
          "law": 2,
          "blood": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Lassar Teleport",
      "location": "Ice Mountain",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 3001,
        "y": 3470,
        "z": 0
      },
      "requirements": {
        "magic_level": 72,
        "runes": {
          "law": 2,
          "water": 4
        },
        "members_only": true
      }
    },
    {
      "name": "Dareeyak Teleport",
      "location": "Wilderness Bandit Camp",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 2969,
        "y": 3695,
        "z": 0
      },
      "requirements": {
        "magic_level": 78,
        "runes": {
          "law": 2,
          "fire": 3
        },
        "members_only": true
      }
    },
    {
      "name": "Carrallangar Teleport",
      "location": "Graveyard of Shadows (Wilderness)",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 3172,
        "y": 3668,
        "z": 0
      },
      "requirements": {
        "magic_level": 84,
        "runes": {
          "law": 2,
          "blood": 2
        },
        "members_only": true
      }
    },
    {
      "name": "Annakarl Teleport",
      "location": "Demonic Ruins (Wilderness)",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 3288,
        "y": 3886,
        "z": 0
      },
      "requirements": {
        "magic_level": 90,
        "runes": {
          "law": 2,
          "blood": 2
        },
        "members_only": true
      }
    },
    {
      "name": "Ghorrock Teleport",
      "location": "Frozen Waste Plateau (Wilderness)",
      "spellbook": "Ancient Magicks",
      "coordinates": {
        "x": 2977,
        "y": 3873,
        "z": 0
      },
      "requirements": {
        "magic_level": 96,
        "runes": {
          "law": 2,
          "water": 8
        },
        "members_only": true
      }
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/arceuusTeleports.json
================
{
  "arceuus_teleports": [
    {
      "name": "Arceuus Home Teleport",
      "location": "Dark Altar",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 1714,
        "y": 3883,
        "z": 0
      },
      "requirements": {
        "magic_level": 1,
        "runes": {},
        "members_only": true
      }
    },
    {
      "name": "Arceuus Library Teleport",
      "location": "North of Arceuus Library",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 1632,
        "y": 3838,
        "z": 0
      },
      "requirements": {
        "magic_level": 6,
        "runes": {
          "law": 1,
          "earth": 2
        },
        "members_only": true
      }
    },
    {
      "name": "Draynor Manor Teleport",
      "location": "Draynor Manor",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 3108,
        "y": 3352,
        "z": 0
      },
      "requirements": {
        "magic_level": 17,
        "runes": {
          "law": 1,
          "earth": 1,
          "water": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Battlefront Teleport",
      "location": "Ancient Grave",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 1349,
        "y": 3739,
        "z": 0
      },
      "requirements": {
        "magic_level": 23,
        "runes": {
          "law": 1,
          "earth": 1,
          "fire": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Mind Altar Teleport",
      "location": "Mind Altar",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 2979,
        "y": 3509,
        "z": 0
      },
      "requirements": {
        "magic_level": 28,
        "runes": {
          "law": 1,
          "mind": 2
        },
        "members_only": true
      }
    },
    {
      "name": "Respawn Teleport",
      "location": "Current respawn point",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "requirements": {
        "magic_level": 34,
        "runes": {
          "law": 1,
          "soul": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Salve Graveyard Teleport",
      "location": "Mort Myre Swamp entrance",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 3432,
        "y": 3458,
        "z": 0
      },
      "requirements": {
        "magic_level": 40,
        "runes": {
          "law": 1,
          "soul": 2
        },
        "members_only": true,
        "quests": ["Priest in Peril"]
      }
    },
    {
      "name": "Fenkenstrain's Castle Teleport",
      "location": "Fenkenstrain's Castle",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 3548,
        "y": 3528,
        "z": 0
      },
      "requirements": {
        "magic_level": 48,
        "runes": {
          "law": 1,
          "soul": 1,
          "earth": 1
        },
        "members_only": true,
        "quests": ["Priest in Peril"]
      }
    },
    {
      "name": "West Ardougne Teleport",
      "location": "West Ardougne graveyard",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 2500,
        "y": 3291,
        "z": 0
      },
      "requirements": {
        "magic_level": 61,
        "runes": {
          "law": 2,
          "soul": 2
        },
        "members_only": true,
        "quests": ["Biohazard"]
      }
    },
    {
      "name": "Harmony Island Teleport",
      "location": "Harmony Island",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 3797,
        "y": 2866,
        "z": 0
      },
      "requirements": {
        "magic_level": 65,
        "runes": {
          "law": 1,
          "soul": 1,
          "nature": 1
        },
        "members_only": true,
        "quests": ["The Great Brain Robbery"]
      }
    },
    {
      "name": "Cemetery Teleport",
      "location": "The Forgotten Cemetery",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 2978,
        "y": 3763,
        "z": 0
      },
      "requirements": {
        "magic_level": 71,
        "runes": {
          "law": 1,
          "soul": 1,
          "blood": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Barrows Teleport",
      "location": "Barrows",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 3565,
        "y": 3315,
        "z": 0
      },
      "requirements": {
        "magic_level": 83,
        "runes": {
          "law": 2,
          "soul": 2,
          "blood": 1
        },
        "members_only": true,
        "quests": ["Priest in Peril"]
      }
    },
    {
      "name": "Ape Atoll Teleport",
      "location": "Ape Atoll Dungeon",
      "spellbook": "Arceuus",
      "coordinates": {
        "x": 2769,
        "y": 9100,
        "z": 0
      },
      "requirements": {
        "magic_level": 90,
        "runes": {
          "law": 2,
          "soul": 2,
          "blood": 2
        },
        "members_only": true,
        "quests": ["Monkey Madness I"]
      }
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/fairyRingTeleports.json
================
{
  "fairy_ring_teleports": [
    {
      "code": "AIR",
      "location": "Islands: South-east of Ardougne",
      "coordinates": { "x": 2700, "y": 3247, "z": 0 },
      "notes": "Empty island, used for clue scroll coordinates and the medium Ardougne diary. This is also the first fairy ring in the sequence used to access the Fairy Queen's hideout during and after the Fairytale II - Cure a Queen quest."
    },
    {
      "code": "AJP",
      "location": "Varlamore: Avium Savannah",
      "coordinates": { "x": 1651, "y": 3010, "z": 0 },
      "notes": "Requires having travelled to Civitas illa Fortis via Regulus Cento, after completion of Children of the Sun."
    },
    {
      "code": "AJQ",
      "location": "Dungeons: Cave south of Dorgesh-Kaan",
      "coordinates": { "x": 2735, "y": 5221, "z": 0 },
      "notes": "Completion of Death to the Dorgeshuun and a light source is required to enter this area.",
      "points_of_interest": ["Cave crawlers", "Cave bugs", "Cave slimes", "Molanisks", "Dorgesh-Kaan Agility Course"]
    },
    {
      "code": "AJR",
      "location": "Kandarin: Slayer cave south-east of Rellekka",
      "coordinates": { "x": 2780, "y": 3613, "z": 0 },
      "points_of_interest": ["Fremennik Slayer Dungeon", "Rellekka"]
    },
    {
      "code": "AJS",
      "location": "Islands: Penguins near Miscellania",
      "coordinates": { "x": 2500, "y": 3896, "z": 0 },
      "notes": "Penguins; no other access. This is also the fourth and final fairy ring in the sequence used to access the Fairy Queen's hideout during and after the Fairytale II - Cure a Queen quest."
    },
    {
      "code": "AKP",
      "location": "Kharidian Desert: Necropolis",
      "coordinates": { "x": 3284, "y": 2705, "z": 0 },
      "points_of_interest": ["Sophanem", "Menaphos", "Necropolis"],
      "notes": "Unlocked by entering the Necropolis in the beginning of Beneath Cursed Sands."
    },
    {
      "code": "AKQ",
      "location": "Kandarin: Piscatoris Hunter area",
      "coordinates": { "x": 2319, "y": 3619, "z": 0 },
      "points_of_interest": ["Kraken Cove", "Chinchompas (grey)", "Mining spots", "Piscatoris Fishing Colony"]
    },
    {
      "code": "AKR",
      "location": "Great Kourend: Hosidius Vinery",
      "coordinates": { "x": 1827, "y": 3538, "z": 0 },
      "points_of_interest": ["Hosidius Vinery", "Tithe Farm minigame"]
    },
    {
      "code": "AKS",
      "location": "Feldip Hills: Feldip Hunter area",
      "coordinates": { "x": 2571, "y": 2956, "z": 0 },
      "points_of_interest": ["Hunter jungle area", "Chompy hunting grounds", "Gnome glider"]
    },
    {
      "code": "ALP",
      "location": "Islands: Lighthouse",
      "coordinates": { "x": 2503, "y": 3636, "z": 0 },
      "points_of_interest": ["Jossik", "Barbarian Outpost", "Rellekka", "Dagannoths"]
    },
    {
      "code": "ALQ",
      "location": "Morytania: Haunted Woods east of Canifis",
      "coordinates": { "x": 3597, "y": 3495, "z": 0 },
      "notes": "Can be used in conjunction with the Ectophial to quickly access the fairy ring network, but this ring is surrounded by aggressive Vampyres and Leeches.",
      "points_of_interest": ["Farming patch", "Port Phasmatys"]
    },
    {
      "code": "ALR",
      "location": "Other Realms: Abyssal Area",
      "coordinates": { "x": 3059, "y": 4875, "z": 0 },
      "points_of_interest": ["Abyssal leeches", "Abyssal guardians", "Abyssal walkers", "Abyssal demons"],
      "notes": "Alternative area for players to get essence pouches."
    },
    {
      "code": "ALS",
      "location": "Kandarin: McGrubor's Wood",
      "coordinates": { "x": 2644, "y": 3495, "z": 0 },
      "points_of_interest": ["Seers' Village", "Coal trucks", "Fishing Guild", "Ranging Guild", "Hemenster"],
      "notes": "Going here is required for the medium Kandarin Diary."
    },
    {
      "code": "BIP",
      "location": "Islands: South-west of Mort Myre",
      "coordinates": { "x": 3410, "y": 3324, "z": 0 },
      "notes": "Empty island with a shortcut to enter Mort Myre, requiring level 50 Agility. This fairy ring is also used for the hard cryptic clue 'BIP 7013'."
    },
    {
      "code": "BIQ",
      "location": "Kharidian Desert near the Kalphite Hive",
      "coordinates": { "x": 3251, "y": 3095, "z": 0 },
      "points_of_interest": ["Kalphite Lair", "Kalphite Queen", "Shantay Pass"]
    },
    {
      "code": "BIS",
      "location": "Kandarin: Ardougne Zoo - Unicorns",
      "coordinates": { "x": 2635, "y": 3266, "z": 0 },
      "notes": "Unicorns; no other access. Required for the medium Ardougne Diary."
    },
    {
      "code": "BJP",
      "location": "Islands: Isle of Souls",
      "coordinates": { "x": 2267, "y": 2976, "z": 0 },
      "points_of_interest": ["Crumbling Tower", "Isle of Souls Dungeon"]
    },
    {
      "code": "BJR",
      "location": "Other Realms: Realm of the Fisher King",
      "coordinates": { "x": 2650, "y": 4730, "z": 0 },
      "notes": "Requires partial completion of the Holy Grail quest."
    },
    {
      "code": "BJS",
      "location": "Islands: Near Zul-Andra",
      "coordinates": { "x": 2150, "y": 3070, "z": 0 },
      "notes": "Requires completion of the Regicide quest. 76 Agility is needed to jump off the island."
    },
    {
      "code": "BKP",
      "location": "Feldip Hills: South of Castle Wars",
      "coordinates": { "x": 2385, "y": 3035, "z": 0 },
      "points_of_interest": ["Smoke Devil Dungeon", "Chompy bird hunting grounds", "Teak tree", "Castle Wars"]
    },
    {
      "code": "BKQ",
      "location": "Other Realms: Enchanted Valley",
      "coordinates": { "x": 3041, "y": 4532, "z": 0 },
      "points_of_interest": ["Tree spirits"]
    },
    {
      "code": "BKR",
      "location": "Morytania: Mort Myre Swamp, south of Canifis",
      "coordinates": { "x": 3469, "y": 3431, "z": 0 },
      "notes": "Swamp boat south-east (towards Barrows and Burgh de Rott)."
    },
    {
      "code": "BKS",
      "location": "Other Realms: Zanaris",
      "coordinates": { "x": 2412, "y": 4434, "z": 0 },
      "points_of_interest": ["Impetuous Impulses", "Chaeldar", "Cosmic runic altar"]
    },
    {
      "code": "BLP",
      "location": "Dungeons: TzHaar area",
      "coordinates": { "x": 2437, "y": 5126, "z": 0 },
      "points_of_interest": ["TzHaar Fight Cave", "TzHaar Fight Pit", "TzHaar monsters"]
    },
    {
      "code": "BLQ",
      "location": "Other Realms: Yu'biusk",
      "coordinates": { "x": 3573, "y": 4371, "z": 0 },
      "notes": "Requires partial completion of the Land of the Goblins quest. Used during the Hopespear's Will miniquest."
    },
    {
      "code": "BLR",
      "location": "Kandarin: Legends' Guild",
      "coordinates": { "x": 2740, "y": 3351, "z": 0 },
      "points_of_interest": ["Legends' Guild", "Mining spots", "Magic and Maple trees", "Witchaven", "East Ardougne"]
    },
    {
      "code": "BLS",
      "location": "Kebos Lowlands: South of Mount Quidamortem",
      "coordinates": { "x": 1295, "y": 3493, "z": 0 },
      "points_of_interest": ["Rowboat to The Stranglewood", "Mountain Guide for quick access to the Chambers of Xeric"]
    },
    {
      "code": "CIP",
      "location": "Islands: Miscellania",
      "coordinates": { "x": 2513, "y": 3884, "z": 0 },
      "notes": "Requires completion of The Fremennik Trials quest. Required for the medium Fremennik Diary.",
      "points_of_interest": ["Miscellania", "Etceteria", "Managing Miscellania"]
    },
    {
      "code": "CIQ",
      "location": "Kandarin: North-west of Yanille",
      "coordinates": { "x": 2528, "y": 3127, "z": 0 },
      "points_of_interest": ["Tree Gnome Village", "Yanille", "Gu'Tanoth", "Castle Wars"]
    },
    {
      "code": "CIR",
      "location": "Kebos Lowlands: South of Mount Karuulm",
      "coordinates": { "x": 1302, "y": 3762, "z": 0 },
      "notes": "The player must have visited Great Kourend at least once in order to access this fairy ring. Required for the medium Kourend & Kebos Diary.",
      "points_of_interest": ["Mount Karuulm", "Farming Guild"]
    },
    {
      "code": "CIS",
      "location": "Great Kourend: Arceuus Library",
      "coordinates": { "x": 1639, "y": 3868, "z": 0 },
      "notes": "North of the Arceuus Library in Arceuus."
    },
    {
      "code": "CJR",
      "location": "Kandarin: Sinclair Mansion (east)",
      "coordinates": { "x": 2705, "y": 3576, "z": 0 },
      "points_of_interest": ["Sinclair Mansion", "Seers' Village"]
    },
    {
      "code": "CKP",
      "location": "Other Realms: Cosmic entity's plane",
      "coordinates": { "x": 2075, "y": 4848, "z": 0 },
      "notes": "Used during the Fairytale II - Cure a Queen quest."
    },
    {
      "code": "CKR",
      "location": "Karamja: South of Tai Bwo Wannai Village",
      "coordinates": { "x": 2801, "y": 3003, "z": 0 },
      "points_of_interest": ["Graahks", "Shilo Village", "Tai Bwo Wannai Village", "Nature Altar"]
    },
    {
      "code": "CKS",
      "location": "Morytania: Canifis",
      "coordinates": { "x": 3447, "y": 3470, "z": 0 },
      "points_of_interest": ["Morytania Slayer Tower", "Canifis", "Paterdomus", "Mort Myre swamp"]
    },
    {
      "code": "CLP",
      "location": "Islands: Draynor island",
      "coordinates": { "x": 3082, "y": 3206, "z": 0 },
      "notes": "This is the solution to the hard coordinate clue '01 degrees 30 minutes north, 20 degrees 01 minutes east'."
    },
    {
      "code": "CLR",
      "location": "Islands: Ape Atoll",
      "coordinates": { "x": 2740, "y": 2738, "z": 0 },
      "notes": "Requires completion of the Monkey Madness I quest. In addition, 48 Agility and a Ninja monkey greegree or Kruk monkey greegree is required to exit the agility course and travel to the city without taking damage."
    },
    {
      "code": "CLS",
      "location": "Islands: Hazelmere's home",
      "coordinates": { "x": 2682, "y": 3081, "z": 0 },
      "notes": "Hazelmere lives nearby."
    },
    {
      "code": "DIP",
      "location": "Other Realms: Abyssal Nexus",
      "coordinates": { "x": 3037, "y": 4763, "z": 0 },
      "points_of_interest": ["Abyssal Sire"]
    },
    {
      "code": "DIP",
      "location": "Other Realms: Abyssal Nexus",
      "coordinates": { "x": 3037, "y": 4763, "z": 0 },
      "points_of_interest": ["Abyssal Sire"]
    },
    {
      "code": "DIQ",
      "location": "Player-owned house Superior Garden",
      "notes": "Only works if the player has a fairy ring in their house."
    },
    {
      "code": "DIR",
      "location": "Other Realms: Gorak's Plane",
      "coordinates": { "x": 3038, "y": 5348, "z": 0 },
      "notes": "The only place Goraks can be found other than the God Wars Dungeon."
    },
    {
      "code": "DIS",
      "location": "Misthalin: Wizards' Tower",
      "coordinates": { "x": 3108, "y": 3149, "z": 0 },
      "points_of_interest": ["Wizards' Tower", "Rune essence mine"],
      "notes": "Required for the medium Lumbridge & Draynor Diary."
    },
    {
      "code": "DJP",
      "location": "Kandarin: Tower of Life",
      "coordinates": { "x": 2658, "y": 3230, "z": 0 },
      "points_of_interest": ["Ardougne Monastery", "Ardougne cloak unlimited teleport", "East Ardougne", "Spirit tree", "Port Khazard"]
    },
    {
      "code": "DJR",
      "location": "Great Kourend: Chasm of Fire",
      "coordinates": { "x": 1455, "y": 3658, "z": 0 },
      "points_of_interest": ["Chasm of Fire", "North-west corner of Shayzien"]
    },
    {
      "code": "DKP",
      "location": "Karamja: Gnome Glider",
      "coordinates": { "x": 2900, "y": 3111, "z": 0 },
      "points_of_interest": ["Karambwan fishing spots"]
    },
    {
      "code": "DKR",
      "location": "Misthalin: Edgeville",
      "coordinates": { "x": 3129, "y": 3496, "z": 0 },
      "points_of_interest": ["Grand Exchange", "Edgeville bank", "Wilderness"]
    },
    {
      "code": "DKS",
      "location": "Fremennik: Polar Hunter area",
      "coordinates": { "x": 2744, "y": 3719, "z": 0 },
      "points_of_interest": ["Keldagrim entrance", "Brine Rat Cavern", "Rock crabs", "Rellekka"]
    },
    {
      "code": "DLQ",
      "location": "Kharidian Desert: North of Nardah",
      "coordinates": { "x": 3423, "y": 3016, "z": 0 },
      "points_of_interest": ["Desert lizards", "Jackals", "Nardah"]
    },
    {
      "code": "DLR",
      "location": "Islands: Poison Waste south of Isafdar",
      "coordinates": { "x": 2213, "y": 3099, "z": 0 },
      "notes": "Player can use Broken Handz's telescope to spectate players fighting Zulrah. There are also unattackable badgers on the island. This is also the second fairy ring in the sequence used to access the Fairy Queen's hideout during and after the Fairytale II - Cure a Queen quest."
    },
    {
      "code": "DLS",
      "location": "Dungeons: Myreque hideout under The Hollows",
      "coordinates": { "x": 3447, "y": 9824, "z": 0 },
      "notes": "Requires completion of the In Search of the Myreque quest. Find the cracks in the walls to enter the main tunnel under the Hair of the Dog pub in Canifis."
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/JewelryTeleport.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
import net.runelite.api.coords.WorldPoint;
import java.util.List;
public class JewelryTeleport extends Teleport {
    private int charges;
    private List<JewelryDestination> destinations;
    public JewelryTeleport(String name, int charges, List<JewelryDestination> destinations) {
        super(name, null, TeleportType.JEWELRY, 0, null, null);
        this.charges = charges;
        this.destinations = destinations;
    }
    public int getCharges() { return charges; }
    public List<JewelryDestination> getDestinations() { return destinations; }
    public static class JewelryDestination {
        private String name;
        private WorldPoint coordinates;
        private boolean membersOnly;
        public JewelryDestination(String name, WorldPoint coordinates, boolean membersOnly) {
            this.name = name;
            this.coordinates = coordinates;
            this.membersOnly = membersOnly;
        }
        public String getName() { return name; }
        public WorldPoint getCoordinates() { return coordinates; }
        public boolean isMembersOnly() { return membersOnly; }
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/jewelryTeleports.json
================
{
  "jewelry_teleports": [
    {
      "name": "Amulet of Glory",
      "charges": 4,
      "teleports": [
        {
          "location": "Edgeville",
          "coordinates": {
            "x": 3093,
            "y": 3493,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Draynor Village",
          "coordinates": {
            "x": 3081,
            "y": 3251,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Karamja",
          "coordinates": {
            "x": 2918,
            "y": 3176,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Al Kharid",
          "coordinates": {
            "x": 3293,
            "y": 3163,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        }
      ]
    },
    {
      "name": "Ring of Dueling",
      "charges": 8,
      "teleports": [
        {
          "location": "Castle Wars",
          "coordinates": {
            "x": 2440,
            "y": 3089,
            "z": 0
          },
          "members_only": true,
          "requirements": null
        },
        {
          "location": "Ferox Enclave",
          "coordinates": {
            "x": 3151,
            "y": 3635,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        }
      ]
    },
    {
      "name": "Games Necklace",
      "charges": 8,
      "teleports": [
        {
          "location": "Burthorpe Games Room",
          "coordinates": {
            "x": 2898,
            "y": 3553,
            "z": 0
          },
          "members_only": true,
          "requirements": null
        },
        {
          "location": "Barbarian Outpost",
          "coordinates": {
            "x": 2517,
            "y": 3570,
            "z": 0
          },
          "members_only": true,
          "requirements": null
        },
        {
          "location": "Corporeal Beast",
          "coordinates": {
            "x": 2965,
            "y": 4382,
            "z": 2
          },
          "members_only": true,
          "requirements": null
        },
        {
          "location": "Wintertodt Camp",
          "coordinates": {
            "x": 1624,
            "y": 3938,
            "z": 0
          },
          "members_only": true,
          "requirements": null
        }
      ]
    },
    {
      "name": "Ring of Wealth",
      "charges": 5,
      "teleports": [
        {
          "location": "Grand Exchange",
          "coordinates": {
            "x": 3161,
            "y": 3478,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Falador Park",
          "coordinates": {
            "x": 2995,
            "y": 3375,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        }
      ]
    },
    {
      "name": "Skills Necklace",
      "charges": 4,
      "teleports": [
        {
          "location": "Fishing Guild",
          "coordinates": {
            "x": 2611,
            "y": 3391,
            "z": 0
          },
          "members_only": true,
          "requirements": "68 Fishing"
        },
        {
          "location": "Mining Guild",
          "coordinates": {
            "x": 3050,
            "y": 9763,
            "z": 0
          },
          "members_only": true,
          "requirements": "60 Mining"
        },
        {
          "location": "Crafting Guild",
          "coordinates": {
            "x": 2933,
            "y": 3286,
            "z": 0
          },
          "members_only": true,
          "requirements": "40 Crafting"
        },
        {
          "location": "Woodcutting Guild",
          "coordinates": {
            "x": 1659,
            "y": 3505,
            "z": 0
          },
          "members_only": true,
          "requirements": "60 Woodcutting"
        }
      ]
    },
    {
      "name": "Digsite Pendant",
      "charges": 5,
      "teleports": [
        {
          "location": "Digsite",
          "coordinates": {
            "x": 3340,
            "y": 3445,
            "z": 0
          },
          "members_only": true,
          "requirements": "Bone Voyage"
        },
        {
          "location": "Fossil Island",
          "coordinates": {
            "x": 3724,
            "y": 3808,
            "z": 0
          },
          "members_only": true,
          "requirements": "Bone Voyage"
        }
      ]
    },
    {
      "name": "Necklace of Passage",
      "charges": 5,
      "teleports": [
        {
          "location": "Wizards' Tower",
          "coordinates": {
            "x": 3107,
            "y": 3160,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Outpost",
          "coordinates": {
            "x": 2430,
            "y": 3349,
            "z": 0
          },
          "members_only": true,
          "requirements": null
        },
        {
          "location": "Eagles' Eyrie",
          "coordinates": {
            "x": 3408,
            "y": 3157,
            "z": 0
          },
          "members_only": true,
          "requirements": null
        }
      ]
    },
    {
      "name": "Burning Amulet",
      "charges": 5,
      "teleports": [
        {
          "location": "Bandit Camp",
          "coordinates": {
            "x": 3038,
            "y": 3652,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Lava Maze",
          "coordinates": {
            "x": 3029,
            "y": 3842,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        },
        {
          "location": "Chaos Temple",
          "coordinates": {
            "x": 3235,
            "y": 3635,
            "z": 0
          },
          "members_only": false,
          "requirements": null
        }
      ]
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/lunarMagicTeleports.json
================
{
  "lunar_magic_teleports": [
    {
      "name": "Moonclan Teleport",
      "location": "Moonclan Island",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2113,
        "y": 3915,
        "z": 0
      },
      "requirements": {
        "magic_level": 69,
        "runes": {
          "law": 1,
          "astral": 2,
          "earth": 2
        },
        "members_only": true,
        "quest": "Lunar Diplomacy"
      }
    },
    {
      "name": "Ourania Teleport",
      "location": "Ourania Altar",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2469,
        "y": 3246,
        "z": 0
      },
      "requirements": {
        "magic_level": 71,
        "runes": {
          "law": 1,
          "astral": 2,
          "earth": 6
        },
        "members_only": true
      }
    },
    {
      "name": "Waterbirth Teleport",
      "location": "Waterbirth Island",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2546,
        "y": 3757,
        "z": 0
      },
      "requirements": {
        "magic_level": 72,
        "runes": {
          "law": 1,
          "astral": 2,
          "water": 1
        },
        "members_only": true
      }
    },
    {
      "name": "Barbarian Teleport",
      "location": "Barbarian Outpost",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2544,
        "y": 3569,
        "z": 0
      },
      "requirements": {
        "magic_level": 75,
        "runes": {
          "law": 1,
          "astral": 2,
          "fire": 3
        },
        "members_only": true
      }
    },
    {
      "name": "Khazard Teleport",
      "location": "Port Khazard",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2634,
        "y": 3166,
        "z": 0
      },
      "requirements": {
        "magic_level": 78,
        "runes": {
          "law": 2,
          "astral": 2,
          "water": 4
        },
        "members_only": true
      }
    },
    {
      "name": "Fishing Guild Teleport",
      "location": "Fishing Guild",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2611,
        "y": 3391,
        "z": 0
      },
      "requirements": {
        "magic_level": 85,
        "runes": {
          "law": 3,
          "astral": 3,
          "water": 10
        },
        "members_only": true
      }
    },
    {
      "name": "Catherby Teleport",
      "location": "Catherby",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2804,
        "y": 3442,
        "z": 0
      },
      "requirements": {
        "magic_level": 87,
        "runes": {
          "law": 3,
          "astral": 3,
          "water": 10
        },
        "members_only": true
      }
    },
    {
      "name": "Ice Plateau Teleport",
      "location": "Ice Plateau (Wilderness)",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2976,
        "y": 3944,
        "z": 0
      },
      "requirements": {
        "magic_level": 89,
        "runes": {
          "law": 3,
          "astral": 3,
          "water": 8
        },
        "members_only": true
      }
    },
    {
      "name": "Trollheim Teleport",
      "location": "Trollheim",
      "spellbook": "Lunar",
      "coordinates": {
        "x": 2910,
        "y": 3611,
        "z": 0
      },
      "requirements": {
        "magic_level": 92,
        "runes": {
          "law": 3,
          "astral": 3,
          "earth": 10
        },
        "members_only": true,
        "quest": "Eadgar's Ruse"
      }
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/POHTeleportOptions.json
================
{
  "poh_teleports": [
    {
      "name": "Jewelry Box",
      "type": "furniture",
      "teleports": [
        {
          "name": "Ring of dueling",
          "destinations": [
            {
              "name": "Emir's Arena",
              "coordinates": {
                "x": 3315,
                "y": 3235,
                "z": 0
              }
            },
            {
              "name": "Castle Wars Arena",
              "coordinates": {
                "x": 2440,
                "y": 3090,
                "z": 0
              }
            },
            {
              "name": "Ferox Enclave",
              "coordinates": {
                "x": 3151,
                "y": 3635,
                "z": 0
              }
            },
            {
              "name": "Fortis Colosseum",
              "coordinates": {
                "x": 1793,
                "y": 3107,
                "z": 0
              }
            }
          ]
        },
        {
          "name": "Games necklace",
          "destinations": [
            {
              "name": "Burthorpe",
              "coordinates": {
                "x": 2898,
                "y": 3553,
                "z": 0
              }
            },
            {
              "name": "Barbarian Outpost",
              "coordinates": {
                "x": 2520,
                "y": 3571,
                "z": 0
              }
            },
            {
              "name": "Corporeal Beast",
              "coordinates": {
                "x": 2967,
                "y": 4254,
                "z": 0
              }
            },
            {
              "name": "Chasm of Tears",
              "coordinates": {
                "x": 3245,
                "y": 9500,
                "z": 0
              }
            },
            {
              "name": "Wintertodt Camp",
              "coordinates": {
                "x": 1631,
                "y": 3940,
                "z": 0
              }
            }
          ]
        },
        {
          "name": "Combat bracelet",
          "destinations": [
            {
              "name": "Warriors' Guild",
              "coordinates": {
                "x": 2865,
                "y": 3546,
                "z": 0
              }
            },
            {
              "name": "Champions' Guild",
              "coordinates": {
                "x": 3192,
                "y": 3368,
                "z": 0
              }
            },
            {
              "name": "Edgeville Monastery",
              "coordinates": {
                "x": 3052,
                "y": 3490,
                "z": 0
              }
            },
            {
              "name": "Ranging Guild",
              "coordinates": {
                "x": 2653,
                "y": 3439,
                "z": 0
              }
            }
          ]
        },
        {
          "name": "Skills necklace",
          "destinations": [
            {
              "name": "Fishing Guild",
              "coordinates": {
                "x": 2611,
                "y": 3390,
                "z": 0
              }
            },
            {
              "name": "Mining Guild",
              "coordinates": {
                "x": 3046,
                "y": 9735,
                "z": 0
              }
            },
            {
              "name": "Crafting Guild",
              "coordinates": {
                "x": 2933,
                "y": 3295,
                "z": 0
              }
            },
            {
              "name": "Cooks' Guild",
              "coordinates": {
                "x": 3144,
                "y": 3438,
                "z": 0
              }
            },
            {
              "name": "Woodcutting Guild",
              "coordinates": {
                "x": 1662,
                "y": 3505,
                "z": 0
              }
            },
            {
              "name": "Farming Guild",
              "coordinates": {
                "x": 1248,
                "y": 3719,
                "z": 0
              }
            }
          ]
        },
        {
          "name": "Ring of wealth",
          "destinations": [
            {
              "name": "Miscellania",
              "coordinates": {
                "x": 2534,
                "y": 3862,
                "z": 0
              }
            },
            {
              "name": "Grand Exchange",
              "coordinates": {
                "x": 3163,
                "y": 3478,
                "z": 0
              }
            },
            {
              "name": "Falador Park",
              "coordinates": {
                "x": 2995,
                "y": 3375,
                "z": 0
              }
            },
            {
              "name": "Dondakan's Rock",
              "coordinates": {
                "x": 2824,
                "y": 10168,
                "z": 0
              }
            }
          ]
        },
        {
          "name": "Amulet of glory",
          "destinations": [
            {
              "name": "Edgeville",
              "coordinates": {
                "x": 3087,
                "y": 3496,
                "z": 0
              }
            },
            {
              "name": "Karamja",
              "coordinates": {
                "x": 2918,
                "y": 3176,
                "z": 0
              }
            },
            {
              "name": "Draynor Village",
              "coordinates": {
                "x": 3105,
                "y": 3251,
                "z": 0
              }
            },
            {
              "name": "Al Kharid",
              "coordinates": {
                "x": 3293,
                "y": 3163,
                "z": 0
              }
            }
          ]
        }
      ],
      "requirements": {
        "construction_level": 91
      },
      "members_only": true
    },
    {
      "name": "Portal Nexus",
      "type": "room",
      "teleports": [
        {
          "name": "Arceuus Library",
          "coordinates": {
            "x": 1632,
            "y": 3838,
            "z": 0
          },
          "requirements": {
            "magic_level": 6
          }
        },
        {
          "name": "Draynor Manor",
          "coordinates": {
            "x": 3108,
            "y": 3352,
            "z": 0
          },
          "requirements": {
            "magic_level": 17
          }
        },
        {
          "name": "Battlefront",
          "coordinates": {
            "x": 1349,
            "y": 3739,
            "z": 0
          },
          "requirements": {
            "magic_level": 23
          }
        },
        {
          "name": "Varrock",
          "coordinates": {
            "x": 3210,
            "y": 3424,
            "z": 0
          },
          "requirements": {
            "magic_level": 25
          }
        },
        {
          "name": "Lumbridge",
          "coordinates": {
            "x": 3222,
            "y": 3218,
            "z": 0
          },
          "requirements": {
            "magic_level": 31
          }
        },
        {
          "name": "Falador",
          "coordinates": {
            "x": 2965,
            "y": 3378,
            "z": 0
          },
          "requirements": {
            "magic_level": 37
          }
        },
        {
          "name": "Camelot",
          "coordinates": {
            "x": 2757,
            "y": 3477,
            "z": 0
          },
          "requirements": {
            "magic_level": 45
          }
        },
        {
          "name": "Ardougne",
          "coordinates": {
            "x": 2661,
            "y": 3300,
            "z": 0
          },
          "requirements": {
            "magic_level": 51,
            "quests": ["Plague City"]
          }
        },
        {
          "name": "Watchtower",
          "coordinates": {
            "x": 2545,
            "y": 3112,
            "z": 0
          },
          "requirements": {
            "magic_level": 58,
            "quests": ["Watchtower"]
          }
        },
        {
          "name": "Senntisten",
          "coordinates": {
            "x": 3321,
            "y": 3335,
            "z": 0
          },
          "requirements": {
            "magic_level": 60,
            "quests": ["Desert Treasure I"]
          }
        },
        {
          "name": "Kharyrll",
          "coordinates": {
            "x": 3493,
            "y": 3472,
            "z": 0
          },
          "requirements": {
            "magic_level": 66,
            "quests": ["Desert Treasure I"]
          }
        },
        {
          "name": "Lunar Isle",
          "coordinates": {
            "x": 2113,
            "y": 3915,
            "z": 0
          },
          "requirements": {
            "magic_level": 69,
            "quests": ["Lunar Diplomacy"]
          }
        },
        {
          "name": "Waterbirth Island",
          "coordinates": {
            "x": 2546,
            "y": 3757,
            "z": 0
          },
          "requirements": {
            "magic_level": 72,
            "quests": ["Lunar Diplomacy"]
          }
        },
        {
          "name": "Barbarian Outpost",
          "coordinates": {
            "x": 2544,
            "y": 3569,
            "z": 0
          },
          "requirements": {
            "magic_level": 75
          }
        },
        {
          "name": "Fishing Guild",
          "coordinates": {
            "x": 2611,
            "y": 3391,
            "z": 0
          },
          "requirements": {
            "magic_level": 85,
            "quests": ["Lunar Diplomacy"]
          }
        },
        {
          "name": "Catherby",
          "coordinates": {
            "x": 2804,
            "y": 3442,
            "z": 0
          },
          "requirements": {
            "magic_level": 87,
            "quests": ["Lunar Diplomacy"]
          }
        },
        {
          "name": "Annakarl",
          "coordinates": {
            "x": 3288,
            "y": 3886,
            "z": 0
          },
          "requirements": {
            "magic_level": 90,
            "quests": ["Desert Treasure I"]
          }
        },
        {
          "name": "Ape Atoll (Arceuus)",
          "coordinates": {
            "x": 2763,
            "y": 2702,
            "z": 0
          },
          "requirements": {
            "magic_level": 90,
            "quests": ["Monkey Madness I"]
          }
        },
        {
          "name": "Ghorrock",
          "coordinates": {
            "x": 2977,
            "y": 3873,
            "z": 0
          },
          "requirements": {
            "magic_level": 96,
            "quests": ["Desert Treasure I"]
          }
        }
      ],
      "requirements": {
        "construction_level": 80
      },
      "members_only": true
    },
    {
      "name": "Spirit Tree",
      "type": "garden_feature",
      "teleports": [
        {
          "name": "Tree Gnome Village",
          "coordinates": {
            "x": 2539,
            "y": 3166,
            "z": 0
          },
          "notes": "In the middle of the Gnome Maze"
        },
        {
          "name": "Gnome Stronghold",
          "coordinates": {
            "x": 2460,
            "y": 3446,
            "z": 0
          },
          "requirements": {
            "quests": ["The Grand Tree"]
          },
          "notes": "Requires quest completion to travel from this location. Can be used as a destination before quest completion."
        },
        {
          "name": "Battlefield of Khazard",
          "coordinates": {
            "x": 2555,
            "y": 3259,
            "z": 0
          },
          "notes": "Just south of West Ardougne"
        },
        {
          "name": "Grand Exchange",
          "coordinates": {
            "x": 3185,
            "y": 3510,
            "z": 0
          },
          "notes": "North-east corner of the Grand Exchange in Varrock"
        },
        {
          "name": "Feldip Hills",
          "coordinates": {
            "x": 2486,
            "y": 2850,
            "z": 0
          },
          "notes": "South-west corner, next to the Myths' Guild"
        },
        {
          "name": "Poison Waste",
          "coordinates": {
            "x": 2339,
            "y": 3111,
            "z": 0
          },
          "requirements": {
            "quests": ["The Path of Glouphrie (partial)"]
          },
          "notes": "East of the Poison Waste"
        },
        {
          "name": "Prifddinas",
          "coordinates": {
            "x": 3275,
            "y": 6124,
            "z": 0
          },
          "requirements": {
            "quests": ["Song of the Elves"]
          }
        }
      ],
      "player_grown_locations": [
        {
          "name": "Etceteria",
          "coordinates": {
            "x": 2613,
            "y": 3858,
            "z": 0
          },
          "notes": "South-eastern Etceteria"
        },
        {
          "name": "Port Sarim",
          "coordinates": {
            "x": 3060,
            "y": 3258,
            "z": 0
          },
          "notes": "Easternmost part of Port Sarim"
        },
        {
          "name": "Brimhaven",
          "coordinates": {
            "x": 2802,
            "y": 3203,
            "z": 0
          },
          "notes": "North-eastern part, near the Agility Arena"
        },
        {
          "name": "Hosidius",
          "coordinates": {
            "x": 1693,
            "y": 3542,
            "z": 0
          },
          "notes": "Next to the saltpetre deposits and south-east of the Forthos Ruin"
        },
        {
          "name": "Farming Guild",
          "coordinates": {
            "x": 1253,
            "y": 3750,
            "z": 0
          },
          "notes": "Inside the advanced tier of the Farming Guild. Can be accessed before level 85 with stat boosting items."
        }
      ],
      "player_owned_house": {
        "name": "Superior Garden",
        "requirements": {
          "construction_level": 75,
          "farming_level": 83
        },
        "notes": "Does not count towards limit on spirit trees planted. Provides 350 experience in both Farming and Construction."
      },
      "requirements": {
        "farming_level": 83
      },
      "members_only": true
    },
    {
      "name": "Fairy Ring",
      "type": "garden_feature",
      "teleports": [{
        "code": "AIQ",
        "location": "Asgarnia: Mudskipper Point",
        "coordinates": { "x": 2996, "y": 3114, "z": 0 },
        "points_of_interest": ["Mogres", "Rimmington", "Port Sarim", "Asgarnia Ice Dungeon"]
      },
      {
        "code": "AIR",
        "location": "Islands: South-east of Ardougne",
        "coordinates": { "x": 2700, "y": 3247, "z": 0 },
        "notes": "Empty island, used for clue scroll coordinates and the medium Ardougne diary. This is also the first fairy ring in the sequence used to access the Fairy Queen's hideout during and after the Fairytale II - Cure a Queen quest."
      },
      {
        "code": "AJP",
        "location": "Varlamore: Avium Savannah",
        "coordinates": { "x": 1651, "y": 3010, "z": 0 },
        "notes": "Requires having travelled to Civitas illa Fortis via Regulus Cento, after completion of Children of the Sun."
      },
      {
        "code": "AJQ",
        "location": "Dungeons: Cave south of Dorgesh-Kaan",
        "coordinates": { "x": 2735, "y": 5221, "z": 0 },
        "notes": "Completion of Death to the Dorgeshuun and a light source is required to enter this area.",
        "points_of_interest": ["Cave crawlers", "Cave bugs", "Cave slimes", "Molanisks", "Dorgesh-Kaan Agility Course"]
      },
      {
        "code": "AJR",
        "location": "Kandarin: Slayer cave south-east of Rellekka",
        "coordinates": { "x": 2780, "y": 3613, "z": 0 },
        "points_of_interest": ["Fremennik Slayer Dungeon", "Rellekka"]
      },
      {
        "code": "AJS",
        "location": "Islands: Penguins near Miscellania",
        "coordinates": { "x": 2500, "y": 3896, "z": 0 },
        "notes": "Penguins; no other access. This is also the fourth and final fairy ring in the sequence used to access the Fairy Queen's hideout during and after the Fairytale II - Cure a Queen quest."
      },
      {
        "code": "AKP",
        "location": "Kharidian Desert: Necropolis",
        "coordinates": { "x": 3284, "y": 2705, "z": 0 },
        "points_of_interest": ["Sophanem", "Menaphos", "Necropolis"],
        "notes": "Unlocked by entering the Necropolis in the beginning of Beneath Cursed Sands."
      },
      {
        "code": "AKQ",
        "location": "Kandarin: Piscatoris Hunter area",
        "coordinates": { "x": 2319, "y": 3619, "z": 0 },
        "points_of_interest": ["Kraken Cove", "Chinchompas (grey)", "Mining spots", "Piscatoris Fishing Colony"]
      },
      {
        "code": "AKR",
        "location": "Great Kourend: Hosidius Vinery",
        "coordinates": { "x": 1827, "y": 3538, "z": 0 },
        "points_of_interest": ["Hosidius Vinery", "Tithe Farm minigame"]
      },
      {
        "code": "AKS",
        "location": "Feldip Hills: Feldip Hunter area",
        "coordinates": { "x": 2571, "y": 2956, "z": 0 },
        "points_of_interest": ["Hunter jungle area", "Chompy hunting grounds", "Gnome glider"]
      },
      {
        "code": "ALP",
        "location": "Islands: Lighthouse",
        "coordinates": { "x": 2503, "y": 3636, "z": 0 },
        "points_of_interest": ["Jossik", "Barbarian Outpost", "Rellekka", "Dagannoths"]
      },
      {
        "code": "ALQ",
        "location": "Morytania: Haunted Woods east of Canifis",
        "coordinates": { "x": 3597, "y": 3495, "z": 0 },
        "notes": "Can be used in conjunction with the Ectophial to quickly access the fairy ring network, but this ring is surrounded by aggressive Vampyres and Leeches.",
        "points_of_interest": ["Farming patch", "Port Phasmatys"]
      },
      {
        "code": "ALR",
        "location": "Other Realms: Abyssal Area",
        "coordinates": { "x": 3059, "y": 4875, "z": 0 },
        "points_of_interest": ["Abyssal leeches", "Abyssal guardians", "Abyssal walkers", "Abyssal demons"],
        "notes": "Alternative area for players to get essence pouches."
      },
      {
        "code": "ALS",
        "location": "Kandarin: McGrubor's Wood",
        "coordinates": { "x": 2644, "y": 3495, "z": 0 },
        "points_of_interest": ["Seers' Village", "Coal trucks", "Fishing Guild", "Ranging Guild", "Hemenster"],
        "notes": "Going here is required for the medium Kandarin Diary."
      },
      {
        "code": "BIP",
        "location": "Islands: South-west of Mort Myre",
        "coordinates": { "x": 3410, "y": 3324, "z": 0 },
        "notes": "Empty island with a shortcut to enter Mort Myre, requiring level 50 Agility. This fairy ring is also used for the hard cryptic clue 'BIP 7013'."
      },
      {
        "code": "BIQ",
        "location": "Kharidian Desert near the Kalphite Hive",
        "coordinates": { "x": 3251, "y": 3095, "z": 0 },
        "points_of_interest": ["Kalphite Lair", "Kalphite Queen", "Shantay Pass"]
      },
      {
        "code": "BIS",
        "location": "Kandarin: Ardougne Zoo - Unicorns",
        "coordinates": { "x": 2635, "y": 3266, "z": 0 },
        "notes": "Unicorns; no other access. Required for the medium Ardougne Diary."
      },
      {
        "code": "BJP",
        "location": "Islands: Isle of Souls",
        "coordinates": { "x": 2267, "y": 2976, "z": 0 },
        "points_of_interest": ["Crumbling Tower", "Isle of Souls Dungeon"]
      },
      {
        "code": "BJR",
        "location": "Other Realms: Realm of the Fisher King",
        "coordinates": { "x": 2650, "y": 4730, "z": 0 },
        "notes": "Requires partial completion of the Holy Grail quest."
      },
      {
        "code": "BJS",
        "location": "Islands: Near Zul-Andra",
        "coordinates": { "x": 2150, "y": 3070, "z": 0 },
        "notes": "Requires completion of the Regicide quest. 76 Agility is needed to jump off the island."
      },
      {
        "code": "BKP",
        "location": "Feldip Hills: South of Castle Wars",
        "coordinates": { "x": 2385, "y": 3035, "z": 0 },
        "points_of_interest": ["Smoke Devil Dungeon", "Chompy bird hunting grounds", "Teak tree", "Castle Wars"]
      },
      {
        "code": "BKQ",
        "location": "Other Realms: Enchanted Valley",
        "coordinates": { "x": 3041, "y": 4532, "z": 0 },
        "points_of_interest": ["Tree spirits"]
      },
      {
        "code": "BKR",
        "location": "Morytania: Mort Myre Swamp, south of Canifis",
        "coordinates": { "x": 3469, "y": 3431, "z": 0 },
        "notes": "Swamp boat south-east (towards Barrows and Burgh de Rott)."
      },
      {
        "code": "BKS",
        "location": "Other Realms: Zanaris",
        "coordinates": { "x": 2412, "y": 4434, "z": 0 },
        "points_of_interest": ["Impetuous Impulses", "Chaeldar", "Cosmic runic altar"]
      },
      {
        "code": "BLP",
        "location": "Dungeons: TzHaar area",
        "coordinates": { "x": 2437, "y": 5126, "z": 0 },
        "points_of_interest": ["TzHaar Fight Cave", "TzHaar Fight Pit", "TzHaar monsters"]
      },
      {
        "code": "BLQ",
        "location": "Other Realms: Yu'biusk",
        "coordinates": { "x": 3573, "y": 4371, "z": 0 },
        "notes": "Requires partial completion of the Land of the Goblins quest. Used during the Hopespear's Will miniquest."
      },
      {
        "code": "BLR",
        "location": "Kandarin: Legends' Guild",
        "coordinates": { "x": 2740, "y": 3351, "z": 0 },
        "points_of_interest": ["Legends' Guild", "Mining spots", "Magic and Maple trees", "Witchaven", "East Ardougne"]
      },
      {
        "code": "BLS",
        "location": "Kebos Lowlands: South of Mount Quidamortem",
        "coordinates": { "x": 1295, "y": 3493, "z": 0 },
        "points_of_interest": ["Rowboat to The Stranglewood", "Mountain Guide for quick access to the Chambers of Xeric"]
      },
      {
        "code": "CIP",
        "location": "Islands: Miscellania",
        "coordinates": { "x": 2513, "y": 3884, "z": 0 },
        "notes": "Requires completion of The Fremennik Trials quest. Required for the medium Fremennik Diary.",
        "points_of_interest": ["Miscellania", "Etceteria", "Managing Miscellania"]
      },
      {
        "code": "CIQ",
        "location": "Kandarin: North-west of Yanille",
        "coordinates": { "x": 2528, "y": 3127, "z": 0 },
        "points_of_interest": ["Tree Gnome Village", "Yanille", "Gu'Tanoth", "Castle Wars"]
      },
      {
        "code": "CIR",
        "location": "Kebos Lowlands: South of Mount Karuulm",
        "coordinates": { "x": 1302, "y": 3762, "z": 0 },
        "notes": "The player must have visited Great Kourend at least once in order to access this fairy ring. Required for the medium Kourend & Kebos Diary.",
        "points_of_interest": ["Mount Karuulm", "Farming Guild"]
      },
      {
        "code": "CIS",
        "location": "Great Kourend: Arceuus Library",
        "coordinates": { "x": 1639, "y": 3868, "z": 0 },
        "notes": "North of the Arceuus Library in Arceuus."
      },
      {
        "code": "CJR",
        "location": "Kandarin: Sinclair Mansion (east)",
        "coordinates": { "x": 2705, "y": 3576, "z": 0 },
        "points_of_interest": ["Sinclair Mansion", "Seers' Village"]
      },
      {
        "code": "CKP",
        "location": "Other Realms: Cosmic entity's plane",
        "coordinates": { "x": 2075, "y": 4848, "z": 0 },
        "notes": "Used during the Fairytale II - Cure a Queen quest."
      },
      {
        "code": "CKR",
        "location": "Karamja: South of Tai Bwo Wannai Village",
        "coordinates": { "x": 2801, "y": 3003, "z": 0 },
        "points_of_interest": ["Graahks", "Shilo Village", "Tai Bwo Wannai Village", "Nature Altar"]
      },
      {
        "code": "CKS",
        "location": "Morytania: Canifis",
        "coordinates": { "x": 3447, "y": 3470, "z": 0 },
        "points_of_interest": ["Morytania Slayer Tower", "Canifis", "Paterdomus", "Mort Myre swamp"]
      },
      {
        "code": "CLP",
        "location": "Islands: Draynor island",
        "coordinates": { "x": 3082, "y": 3206, "z": 0 },
        "notes": "This is the solution to the hard coordinate clue '01 degrees 30 minutes north, 20 degrees 01 minutes east'."
      },
      {
        "code": "CLR",
        "location": "Islands: Ape Atoll",
        "coordinates": { "x": 2740, "y": 2738, "z": 0 },
        "notes": "Requires completion of the Monkey Madness I quest. In addition, 48 Agility and a Ninja monkey greegree or Kruk monkey greegree is required to exit the agility course and travel to the city without taking damage."
      },
      {
        "code": "CLS",
        "location": "Islands: Hazelmere's home",
        "coordinates": { "x": 2682, "y": 3081, "z": 0 },
        "notes": "Hazelmere lives nearby."
      },
      {
        "code": "DIP",
        "location": "Other Realms: Abyssal Nexus",
        "coordinates": { "x": 3037, "y": 4763, "z": 0 },
        "points_of_interest": ["Abyssal Sire"]
      },
      {
        "code": "DIP",
        "location": "Other Realms: Abyssal Nexus",
        "coordinates": { "x": 3037, "y": 4763, "z": 0 },
        "points_of_interest": ["Abyssal Sire"]
      },
      {
        "code": "DIQ",
        "location": "Player-owned house Superior Garden",
        "notes": "Only works if the player has a fairy ring in their house."
      },
      {
        "code": "DIR",
        "location": "Other Realms: Gorak's Plane",
        "coordinates": { "x": 3038, "y": 5348, "z": 0 },
        "notes": "The only place Goraks can be found other than the God Wars Dungeon."
      },
      {
        "code": "DIS",
        "location": "Misthalin: Wizards' Tower",
        "coordinates": { "x": 3108, "y": 3149, "z": 0 },
        "points_of_interest": ["Wizards' Tower", "Rune essence mine"],
        "notes": "Required for the medium Lumbridge & Draynor Diary."
      },
      {
        "code": "DJP",
        "location": "Kandarin: Tower of Life",
        "coordinates": { "x": 2658, "y": 3230, "z": 0 },
        "points_of_interest": ["Ardougne Monastery", "Ardougne cloak unlimited teleport", "East Ardougne", "Spirit tree", "Port Khazard"]
      },
      {
        "code": "DJR",
        "location": "Great Kourend: Chasm of Fire",
        "coordinates": { "x": 1455, "y": 3658, "z": 0 },
        "points_of_interest": ["Chasm of Fire", "North-west corner of Shayzien"]
      },
      {
        "code": "DKP",
        "location": "Karamja: Gnome Glider",
        "coordinates": { "x": 2900, "y": 3111, "z": 0 },
        "points_of_interest": ["Karambwan fishing spots"]
      },
      {
        "code": "DKR",
        "location": "Misthalin: Edgeville",
        "coordinates": { "x": 3129, "y": 3496, "z": 0 },
        "points_of_interest": ["Grand Exchange", "Edgeville bank", "Wilderness"]
      },
      {
        "code": "DKS",
        "location": "Fremennik: Polar Hunter area",
        "coordinates": { "x": 2744, "y": 3719, "z": 0 },
        "points_of_interest": ["Keldagrim entrance", "Brine Rat Cavern", "Rock crabs", "Rellekka"]
      },
      {
        "code": "DLQ",
        "location": "Kharidian Desert: North of Nardah",
        "coordinates": { "x": 3423, "y": 3016, "z": 0 },
        "points_of_interest": ["Desert lizards", "Jackals", "Nardah"]
      },
      {
        "code": "DLR",
        "location": "Islands: Poison Waste south of Isafdar",
        "coordinates": { "x": 2213, "y": 3099, "z": 0 },
        "notes": "Player can use Broken Handz's telescope to spectate players fighting Zulrah. There are also unattackable badgers on the island. This is also the second fairy ring in the sequence used to access the Fairy Queen's hideout during and after the Fairytale II - Cure a Queen quest."
      },
      {
        "code": "DLS",
        "location": "Dungeons: Myreque hideout under The Hollows",
        "coordinates": { "x": 3447, "y": 9824, "z": 0 },
        "notes": "Requires completion of the In Search of the Myreque quest. Find the cracks in the walls to enter the main tunnel under the Hair of the Dog pub in Canifis."
      }
      ],
      "requirements": {
        "construction_level": 85,
        "quests": ["Fairytale II - Cure a Queen (partial completion)"]
      },
      "members_only": true
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/data/locationData/teleportationSpells.json
================
{
    "teleports": [
      {
        "name": "Varrock Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 3210,
          "y": 3424,
          "z": 0
        },
        "requirements": {
          "level": 25,
          "magic_runes": {
            "air": 3,
            "fire": 1,
            "law": 1
          },
          "quests": null
        },
        "cooldown": "none",
        "members_only": false
      },
      {
        "name": "Lumbridge Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 3222,
          "y": 3218,
          "z": 0
        },
        "requirements": {
          "level": 31,
          "magic_runes": {
            "air": 3,
            "earth": 1,
            "law": 1
          },
          "quests": null
        },
        "cooldown": "none",
        "members_only": false
      },
      {
        "name": "Falador Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 2965,
          "y": 3378,
          "z": 0
        },
        "requirements": {
          "level": 37,
          "magic_runes": {
            "air": 3,
            "water": 1,
            "law": 1
          },
          "quests": null
        },
        "cooldown": "none",
        "members_only": false
      },
      {
        "name": "Camelot Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 2757,
          "y": 3477,
          "z": 0
        },
        "requirements": {
          "level": 45,
          "magic_runes": {
            "air": 5,
            "law": 1
          },
          "quests": null
        },
        "cooldown": "none",
        "members_only": true
      },
      {
        "name": "Ardougne Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 2661,
          "y": 3300,
          "z": 0
        },
        "requirements": {
          "level": 51,
          "magic_runes": {
            "water": 2,
            "law": 2
          },
          "quests": "Plague City"
        },
        "cooldown": "none",
        "members_only": true
      },
      {
        "name": "Watchtower Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 2545,
          "y": 3112,
          "z": 0
        },
        "requirements": {
          "level": 58,
          "magic_runes": {
            "earth": 2,
            "law": 2
          },
          "quests": "Watchtower"
        },
        "cooldown": "none",
        "members_only": true
      },
      {
        "name": "Trollheim Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 2888,
          "y": 3676,
          "z": 0
        },
        "requirements": {
          "level": 61,
          "magic_runes": {
            "fire": 2,
            "law": 2
          },
          "quests": "Troll Stronghold"
        },
        "cooldown": "none",
        "members_only": true
      },
      {
        "name": "Ape Atoll Teleport",
        "type": "spell",
        "spellbook": "standard",
        "coordinates": {
          "x": 2755,
          "y": 2784,
          "z": 0
        },
        "requirements": {
          "level": 64,
          "magic_runes": {
            "fire": 2,
            "water": 2,
            "law": 2,
            "bananas": 1
          },
          "quests": "Monkey Madness I"
        },
        "cooldown": "none",
        "members_only": true
      }
    ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/data/hunterCreatureData.json
================
{
  "creatures": [
    {
      "name": "Tropical Wagtail",
      "level": 19,
      "locations": [
        {
          "location": "Feldip Hunter area",
          "worldPoint": {
            "x": 2486,
            "y": 2905,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": null
    },
    {
      "name": "Wild Kebbit",
      "level": 23,
      "locations": [
        {
          "location": "Piscatoris Hunter area",
          "worldPoint": {
            "x": 2333,
            "y": 3595,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": null
    },
    {
      "name": "Sapphire Glacialis",
      "level": 25,
      "locations": [
        {
          "location": "Rellekka Hunter area",
          "worldPoint": {
            "x": 2640,
            "y": 3855,
            "z": 0
          }
        },
        {
          "location": "Farming Guild",
          "worldPoint": {
            "x": 1234,
            "y": 5678,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": null
    },
    {
      "name": "Swamp Lizard",
      "level": 29,
      "locations": [
        {
          "location": "Canifis Hunter area",
          "worldPoint": {
            "x": 3487,
            "y": 3484,
            "z": 0
          }
        },
        {
          "location": "North-west of Slepe",
          "worldPoint": {
            "x": 3500,
            "y": 3505,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Cervus"],
      "questRequirement": "Priest in Peril"
    },
    {
      "name": "Spined Larupia",
      "level": 31,
      "locations": [
        {
          "location": "Feldip Hunter area",
          "worldPoint": {
            "x": 2520,
            "y": 2900,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Ornus"],
      "questRequirement": null
    },
    {
      "name": "Barb-tailed Kebbit",
      "level": 33,
      "locations": [
        {
          "location": "Feldip Hunter area",
          "worldPoint": {
            "x": 2530,
            "y": 2900,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": null
    },
    {
      "name": "Snowy Knight",
      "level": 35,
      "locations": [
        {
          "location": "Rellekka Hunter area",
          "worldPoint": {
            "x": 2650,
            "y": 3860,
            "z": 0
          }
        },
        {
          "location": "Weiss",
          "worldPoint": {
            "x": 2840,
            "y": 3930,
            "z": 0
          }
        },
        {
          "location": "Farming Guild",
          "worldPoint": {
            "x": 3125,
            "y": 3325,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": null
    },
    {
      "name": "Prickly Kebbit",
      "level": 37,
      "locations": [
        {
          "location": "Piscatoris Hunter area",
          "worldPoint": {
            "x": 2320,
            "y": 3580,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": null
    },
    {
      "name": "Embertailed Jerboa",
      "level": 39,
      "locations": [
        {
          "location": "West of Hunter Guild",
          "worldPoint": {
            "x": 2350,
            "y": 3500,
            "z": 0
          }
        },
        {
          "location": "North-west of Locus Oasis",
          "worldPoint": {
            "x": 2400,
            "y": 3550,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman"],
      "questRequirement": "Eagles' Peak"
    },
    {
      "name": "Horned Graahk",
      "level": 41,
      "locations": [
        {
          "location": "Karamja Hunter area",
          "worldPoint": {
            "x": 2760,
            "y": 3010,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Cervus"],
      "questRequirement": null
    },
    {
      "name": "Spotted Kebbit",
      "level": 43,
      "locations": [
        {
          "location": "Piscatoris Falconry area",
          "worldPoint": {
            "x": 2380,
            "y": 3600,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Cervus", "Guild Hunter Ornus"],
      "questRequirement": null
    },
    {
      "name": "Black Warlock",
      "level": 45,
      "locations": [
        {
          "location": "Feldip Hunter area",
          "worldPoint": {
            "x": 2500,
            "y": 2900,
            "z": 0
          }
        },
        {
          "location": "Farming Guild",
          "worldPoint": {
            "x": 3150,
            "y": 3320,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Cervus"],
      "questRequirement": null
    },
    {
      "name": "Orange Salamander",
      "level": 47,
      "locations": [
        {
          "location": "Uzer Hunter area",
          "worldPoint": {
            "x": 3450,
            "y": 3150,
            "z": 0
          }
        },
        {
          "location": "Necropolis Hunter area",
          "worldPoint": {
            "x": 3500,
            "y": 3200,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Cervus", "Guild Hunter Ornus"],
      "questRequirement": null
    },
    {
      "name": "Sabre-toothed Kebbit",
      "level": 51,
      "locations": [
        {
          "location": "Rellekka Hunter area",
          "worldPoint": {
            "x": 2700,
            "y": 3850,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Ornus", "Guild Hunter Cervus"],
      "questRequirement": null
    },
    {
      "name": "Grey Chinchompa",
      "level": 53,
      "locations": [
        {
          "location": "Piscatoris Hunter area",
          "worldPoint": {
            "x": 2330,
            "y": 3605,
            "z": 0
          }
        },
        {
          "location": "Kourend Woodland",
          "worldPoint": {
            "x": 2150,
            "y": 3450,
            "z": 0
          }
        },
        {
          "location": "Isle of Souls",
          "worldPoint": {
            "x": 2900,
            "y": 3200,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Huntmaster Gilman", "Guild Hunter Ornus", "Guild Hunter Cervus"],
      "questRequirement": "Eagles' Peak"
    },
    {
      "name": "Red Chinchompa",
      "level": 63,
      "locations": [
        {
          "location": "Feldip Hunter area",
          "worldPoint": {
            "x": 2524,
            "y": 2910,
            "z": 0
          }
        },
        {
          "location": "Gwenith Hunter area",
          "worldPoint": {
            "x": 2205,
            "y": 3390,
            "z": 0
          }
        }
      ],
      "assignedBy": [
        "Huntmaster Gilman",
        "Guild Hunter Aco",
        "Guild Hunter Teco",
        "Guild Hunter Wolf"
      ],
      "questRequirement": "Hard Western Provinces Diary"
    },
    {
      "name": "Herbiboar",
      "level": 80,
      "locations": [
        {
          "location": "Mushroom Forest, Fossil Island",
          "worldPoint": {
            "x": 3725,
            "y": 3800,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Guild Hunter Teco"],
      "questRequirement": "Bone Voyage"
    },
    {
      "name": "Moonlight Moth",
      "level": 85,
      "locations": [
        {
          "location": "The Burrow",
          "worldPoint": {
            "x": 2750,
            "y": 2980,
            "z": 0
          }
        },
        {
          "location": "Neypotzli",
          "worldPoint": {
            "x": 3300,
            "y": 3200,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Guild Hunter Wolf"],
      "questRequirement": null
    },
    {
      "name": "Moonlight Antelope",
      "level": 91,
      "locations": [
        {
          "location": "The Burrow",
          "worldPoint": {
            "x": 2770,
            "y": 2980,
            "z": 0
          }
        }
      ],
      "assignedBy": ["Guild Hunter Wolf"],
      "questRequirement": null
    }
  ]
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/AIOHunterConfig.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import static net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter.AIOHunterConfig.GROUP;
import net.runelite.client.config.Config;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.config.ConfigItem;
import net.runelite.client.config.ConfigSection;
import net.runelite.client.config.Keybind;
import net.runelite.client.plugins.microbot.util.inventory.DropOrder;
import net.runelite.api.coords.WorldPoint;
import java.util.List;
@ConfigGroup(GROUP)
public interface AIOHunterConfig extends Config {
    String GROUP = "HuntersRumours";
    @ConfigSection(
            name = "General",
            description = "General settings",
            position = 0
    )
    String generalSection = "general";
    String huntingSection = "hunting";
    String antiBanSection = "AntiBan";
    @ConfigItem(
            keyName = "GUIDE",
            name = "GUIDE",
            description = "GUIDE",
            position = 0,
            section = generalSection
    )
    default String GUIDE() {
        return "This plugin allows for fully automated barbarian fishing at Otto's Grotto. \n\n" +
                "To use this plugin, simply start the script at Otto's Grotto with a Barbarian rod and feathers in your inventory.";
    }
    @ConfigItem(
        keyName = "toggleKeybind",
        name = "Toggle Hunter Plugin",
        description = "Keybind to start/stop the hunter plugin",        
        position = 1, // Adjust position as needed
        section = generalSection
    )
    default Keybind toggleKeybind() {
        return Keybind.NOT_SET;
    }
    @ConfigItem(
        keyName = "devDebug",
        name = "Enable developer debug",
        description = "Enable developer debug",
        position = 2, // Adjust position as needed
        section = generalSection
    )
    default boolean devDebug() {
        return true;
    }
    // drop order
    @ConfigItem(
            keyName = "dropOrder",
            name = "Drop Order",
            description = "The order in which to drop items",
            position = 3,
            section = generalSection
    )
    default DropOrder dropOrder() {
        return DropOrder.STANDARD;
    }
    @ConfigItem(
        keyName = "huntingMode",
        name = "Hunting Mode",
        description = "Choose between Hunter Rumours or Classic Hunting",
        position = 0,
        section = huntingSection
    )
    default HuntingMode huntingMode() {
        return HuntingMode.HUNTER_RUMOURS;
    }
    @ConfigItem(
        keyName = "preferredHuntingCreature",
        name = "preferred Hunting Creature",
        description = "Select the creature to hunt in classic mode",
        position = 1,
        section = huntingSection
    )
    default HunterCreature preferredHuntingCreature() {
        CreatureLocation location = new CreatureLocation("Feldip Hills", new WorldPoint(2536, 2910, 0));
        List<CreatureLocation> locations = List.of(location);
        HunterCreature tmp = new HunterCreature ("Red Chinchompa" , 63, "Box Traps", locations);
        return tmp;
    }
    @ConfigItem(
        keyName = "trapLimit",
        name = "Trap Limit",
        description = "The maximum number of traps to set"
    )
    default int trapLimit() {
        return 5;
    }
//######################### antiban settings
    @ConfigItem(
        keyName = "useAntiban",
        name = "Enable Antiban",
        description = "Enable antiban measures like random camera movements",
        section = antiBanSection
    )
    default boolean useAntiban() {
        return true;
    }
    @ConfigItem(
        keyName = "breakDuration",
        name = "Break Duration",
        description = "Duration of breaks in milliseconds",
        section = antiBanSection
    )
    default int breakDuration() {
        return 30000; // 30 seconds
    }
    enum HuntingMode {
        HUNTER_RUMOURS,
        CLASSIC_HUNTING
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/AIOHunterOverlay.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import net.runelite.client.plugins.hunter.HunterPlugin;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.fishing.barbarian.BarbarianFishingScript;
import net.runelite.client.plugins.microbot.util.antiban.Rs2Antiban;
import net.runelite.client.plugins.microbot.util.inventory.Rs2Inventory;
import net.runelite.client.plugins.microbot.util.player.Rs2Player;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import com.google.inject.Provides;
import net.runelite.api.Client;
import net.runelite.api.events.GameTick;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.microbot.util.mouse.VirtualMouse;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import javax.inject.Inject;
import java.awt.*;
public class AIOHunterOverlay extends OverlayPanel{
    private final HuntersRumoursPlugin plugin;
    private final AIOHunterConfig config;
    @Inject
    public AIOHunterOverlay(HuntersRumoursPlugin plugin,  AIOHunterConfig config) {        
        super(plugin);
        this.plugin = plugin;
        setPosition(OverlayPosition.TOP_LEFT);
        setLayer(OverlayLayer.ABOVE_SCENE);        
        setNaughty();
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        // Display information like traps set, animals caught, and antiban status
        //graphics.setColor(Color.WHITE);
        //graphics.drawString("Traps set: " + plugin.getTrapsSet(), 10, 10);
        //graphics.drawString("Animals caught: " + plugin.getAnimalsCaught(), 10, 25);
        try {
            panelComponent.setPreferredSize(new Dimension(250, 400));
            panelComponent.getChildren().add(TitleComponent.builder()
                    .text("\uD83E\uDD86 AIO Hunter Fisher \uD83E\uDD86")
                    .color(Color.ORANGE)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder().build());
            // check if player is in the correct region(10038)
            int correctRegionId = 10038;
            HunterCreature configuredCreature = config.preferredHuntingCreature();
            String region = Rs2Player.getWorldLocation() != null ? Rs2Player.getWorldLocation().getRegionID() == 10038 ? "In Region" : "Not in Region" : "Not in Region";
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Region: " + region)
                    .build());
            panelComponent.getChildren().add(LineComponent.builder().build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Barbarian rod: " + (Rs2Inventory.hasItem("Barbarian rod") ? "Present" : "Not Present"))
                    .build());
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Feathers: " + (Rs2Inventory.hasItem("feather") ? String.valueOf(Rs2Inventory.get("feather").quantity) : "Not Present"))
                    .build());
            panelComponent.getChildren().add(LineComponent.builder().build());
            Rs2Antiban.renderAntibanOverlayComponents(panelComponent);
            panelComponent.getChildren().add(LineComponent.builder()
                    .left(Microbot.status)
                    .right("Version:" + HuntersRumoursScript.version)
                    .build());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return super.render(graphics);
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/AIOHunterTaskManager.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import com.google.gson.Gson;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
public class AIOHunterTaskManager {
    private List<HunterMaster> taskMasters;
    private Map<String, HunterCreature> creatures;
    public AIOHunterTaskManager() {
        loadTaskMastersFromJson("path/to/hunterMasters.json");
        loadCreaturesFromJson("path/to/hunterCreatures.json");
    }
    private void loadTaskMastersFromJson(String path) {
        try (FileReader reader = new FileReader(path)) {
            Gson gson = new Gson();
            TaskMastersWrapper wrapper = gson.fromJson(reader, TaskMastersWrapper.class);
            taskMasters = wrapper.hunterMasters;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void loadCreaturesFromJson(String path) {
        try (FileReader reader = new FileReader(path)) {
            Gson gson = new Gson();
            CreaturesWrapper wrapper = gson.fromJson(reader, CreaturesWrapper.class);
            creatures = wrapper.hunterCreatures.stream()
                .collect(Collectors.toMap(HunterCreature::getName, creature -> creature));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public List<HunterCreature> getTasksForLevel(int hunterLevel, String taskMasterName) {
        for (HunterMaster master : taskMasters) {
            if (master.getName().equals(taskMasterName) && hunterLevel >= master.getRequiredLevel()) {
                return master.getCreatures().stream()
                    .map(creatures::get)
                    .filter(creature -> creature != null && hunterLevel >= creature.getRequiredLevel())
                    .collect(Collectors.toList());
            }
        }
        return null;
    }
    public List<HunterMaster> getTaskMasters() {
        return taskMasters;
    }
    public Map<String, HunterCreature> getCreatures() {
        return creatures;
    }
    // Wrapper classes for JSON deserialization
    private static class TaskMastersWrapper {
        List<HunterMaster> hunterMasters;
    }
    private static class CreaturesWrapper {
        List<HunterCreature> hunterCreatures;
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/CreatureLocation.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
public class CreatureLocation {
    private String locationName;
    private WorldPoint worldPoint;
    public CreatureLocation(String locationName, WorldPoint worldPoint) {
        this.locationName = locationName;
        this.worldPoint = worldPoint;
    }
    // Getters
    public String getLocationName() { return locationName; }
    public WorldPoint getWorldPoint() { return worldPoint; }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/HunterCreature.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import java.util.List;
public class HunterCreature {
    private String name;
    private int requiredLevel;
    private String method;
    private List<CreatureLocation> locations;
    public HunterCreature(String name, int requiredLevel, String method, List<CreatureLocation> locations) {
        this.name = name;
        this.requiredLevel = requiredLevel;
        this.method = method;
        this.locations = locations;
    }
    // Getters
    public String getName() { return name; }
    public int getRequiredLevel() { return requiredLevel; }
    public String getMethod() { return method; }
    public List<CreatureLocation> getLocations() { return locations; }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/HunterMaster.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import java.util.List;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
public class HunterMaster {
    private String name;
    private String tier;
    private int requiredLevel;
    private WorldPoint worldPoint;
    private List<String> creatures;
    private String questRequirement;
    public HunterMaster(String name, String tier, int requiredLevel, WorldPoint worldPoint, List<String> creatures, String questRequirement) {
        this.name = name;
        this.tier = tier;
        this.requiredLevel = requiredLevel;
        this.worldPoint = worldPoint;
        this.creatures = creatures;
        this.questRequirement = questRequirement;
    }
    // Getters
    public String getName() { return name; }
    public String getTier() { return tier; }
    public int getRequiredLevel() { return requiredLevel; }
    public WorldPoint getWorldPoint() { return worldPoint; }
    public List<String> getCreatures() { return creatures; }
    public String getQuestRequirement() { return questRequirement; }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/HuntersRumoursPlugin.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.hunter.HunterConfig;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.util.antiban.AntibanOverlay;
import net.runelite.client.plugins.microbot.util.antiban.Rs2Antiban;
import net.runelite.client.plugins.microbot.util.antiban.Rs2AntibanSettings;
import net.runelite.client.plugins.microbot.util.inventory.Rs2Inventory;
import net.runelite.client.plugins.microbot.util.mouse.VirtualMouse;
import net.runelite.client.plugins.microbot.util.player.Rs2Player;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.api.AnimationID;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.microbot.breakhandler.BreakHandlerPlugin;
import net.runelite.client.plugins.microbot.util.antiban.AntibanPlugin;
//import net.runelite.client.plugins.microbot.fishing.barbarian.BarbarianFishingConfig;
//import net.runelite.client.plugins.microbot.fishing.barbarian.BarbarianFishingScript;
import net.runelite.client.plugins.microbot.util.antiban.enums.Activity;
import net.runelite.client.plugins.microbot.util.antiban.enums.ActivityIntensity;
import net.runelite.client.plugins.microbot.util.antiban.enums.CombatSkills;
import net.runelite.client.plugins.microbot.util.antiban.ui.MasterPanel;
import net.runelite.client.plugins.VoxSylvaePlugins.util.*;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;
import javax.inject.Inject;
import javax.swing.*;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.EnumMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.*;
@PluginDescriptor(
    name = PluginDescriptor.TRUNC+"Hunter Rumours Plugin",
    description = "Automatically handles hunter tasks",
    tags = {"hunter", "rumours", "automation"},
    alwaysOn = false,
    hidden = false
)
@PluginDependency(XpTrackerPlugin.class)
@PluginDependency(XpTrackerPlugin.class)
@Slf4j
public class HuntersRumoursPlugin extends Plugin{
    public static int ticksSinceLogin;
    private static int idleTicks = 0;
    private final Map<Skill, Integer> skillExp = new EnumMap<>(Skill.class);
    private boolean ready;
    private Skill lastSkillChanged;
    private NavigationButton navButton;
    private int IDLE_TIMEOUT = 400;
    @Inject
    Notifier notifier;
    @Inject
    private Client client;
    @Inject
    private ClientThread clientThread;
    @Inject
    private AIOHunterConfig config;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    private AIOHunterOverlay AIOHunterOverlay_instance;
    @Inject
    HuntersRumoursScript HuntersRumoursScript;
    private boolean isRunning = false;
    @Inject
    private KeyManager keyManager;
    private final HotkeyListener hotkeyListener = new HotkeyListener(() -> config.toggleKeybind()) {
        @Override
        public void hotkeyPressed() {
            togglePlugin();
        }
    };
    @Override
    protected void startUp() throws Exception{
       /*  final MasterPanel panel = injector.getInstance(MasterPanel.class);
        final BufferedImage icon = ImageUtil.loadImageResource(getClass(), "antiban.png");
        navButton = NavigationButton.builder()
                .tooltip("Antiban")
                .icon(icon)
                .priority(1)
                .panel(panel)
                .build();
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                SwingUtilities.invokeLater(panel::loadSettings);
            }
        }, 0, 600); */
        Microbot.pauseAllScripts = false;
        Microbot.setClient(client);
        Microbot.setClientThread(clientThread);
        Microbot.setNotifier(notifier);
        Microbot.setMouse(new VirtualMouse());
        if (overlayManager != null) {            
            overlayManager.add(AIOHunterOverlay_instance);
        }
        keyManager.registerKeyListener(hotkeyListener);
        //eventBus.register(this);
        //clientToolbar.addNavigation(navButton);
        //overlayManager.add(new AntibanOverlay());
    }
    @Override
    protected void shutDown() throws Exception{
        overlayManager.removeIf(overlay -> overlay instanceof AIOHunterOverlay);
        //clientToolbar.removeNavigation(navButton);
        keyManager.unregisterKeyListener(hotkeyListener);
        stopPlugin();
    }
    private void togglePlugin() {
        if (isRunning) {
            stopPlugin();
        } else {
            startPlugin();
        }
    }
    private void startPlugin() {
        if (!isRunning) {
            isRunning = true;
            ensurePluginEnabled(BreakHandlerPlugin.class , config.devDebug());
            HuntersRumoursScript.run(config);
            Microbot.showMessage("AIO hunter plugin started by user");               
        }
    }
    private void stopPlugin() {
        if (isRunning) {
            isRunning = false;
            HuntersRumoursScript.shutdown();
            Microbot.showMessage("AIO hunter plugin stopped by user");                                
        }
    }
    @Provides
    AIOHunterConfig provideConfig(ConfigManager configManager) {
        return configManager.getConfig(AIOHunterConfig.class);
    }
    @Subscribe
    public void onChatMessage(ChatMessage event) {
        //if (Rs2Antiban.checkForCookingEvent(event)) {
        //   updateLastCookingAction();
        //}
        if (isRunning) {
            HuntersRumoursScript.onChatMessage(event);
        }
    }
    @Subscribe
    public void onProfileChanged(ProfileChanged event) {
        Rs2Antiban.resetAntibanSettings();
        if (isRunning) {
            HuntersRumoursScript.onProfileChanged(event);
        }
    }
    @Subscribe
    public void onGameTick(GameTick event) {      
        if (isRunning) {
            HuntersRumoursScript.onGameTick();
        }        
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/skilling/hunter/VoxSylvaeAIOHunter/HuntersRumoursScript.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.skilling.hunter.VoxSylvaeAIOHunter;
import java.util.concurrent.TimeUnit;
import net.runelite.api.Skill;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ChatMessage;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.Script;
import net.runelite.client.plugins.microbot.util.antiban.Rs2Antiban;
public class HuntersRumoursScript extends Script {
    public static String version = "0.0.1";
    public static int timeout = 0;
    HunterCreature currentHuntingCreature = null;
    private AIOHunterConfig config;
    private AIOHunterTaskManager rumoursTaskManager;
    /*public enum HunterState {
        CHECK_REQUIREMENTS,   // Check if the player meets the requirements for the task
        SELECT_TASK_MASTER,   // Select the task master (configured or default)
        GET_TASK,             // Get a new task from the task master
        NAVIGATE_TO_HUNT,     // Navigate to the hunting area
        PERFORM_HUNTING,      // Perform the hunting task
        CHECK_BREAK,          // Check if a break should be taken
        GET_NEW_TASK,         // After hunting, get a new task
        FINISHED              // Bot is done with the task or has finished
    }*/
    public enum HunterState {
        INITIALIZE,   // Initialize the bot
        CHECK_REQUIREMENTS,   // Check if the player meets the requirements for the task
        SELECT_TASK,   // Select the task master (configured or default)
        GET_TASK,             // Get a new task from the task master
        NAVIGATE_TO_HUNT,     // Navigate to the hunting area
        PERFORM_HUNTING,      // Perform the hunting task
        CHECK_BREAK,          // Check if a break should be taken
        GET_NEW_TASK,         // After hunting, get a new task
        FINISHED              // Bot is done with the task or has finished
    }
    private HunterState currentState = HunterState.INITIALIZE;
    private void initialize(AIOHunterConfig config) {
        int hunterLevel = getSkillLevel(Skill.HUNTER);
        /*HunterTask currentTask = rumoursTaskManager.getRumourTaskForLevel(hunterLevel);*/
        //rumoursTaskManager = new HunterRumoursTaskManager();
        //classicHuntingManager = new ClassicHuntingManager();
        this.config = config;
        currentState = HunterState.CHECK_REQUIREMENTS;
    }
    public boolean run(AIOHunterConfig config) {        
        Rs2Antiban.resetAntibanSettings();
        Rs2Antiban.antibanSetupTemplates.applyHunterSetup();
        initialize(config);
        mainScheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(() -> {
          try {
                if (!Microbot.isLoggedIn()) return;
                if (!super.run()) return;
                /*if (startCourse == null) {
                    Microbot.showMessage("Agility course: " + config.agilityCourse().name() + " is not supported.");
                    sleep(10000);
                    return;
                }*/
                final LocalPoint playerLocation = Microbot.getClient().getLocalPlayer().getLocalLocation();
                final WorldPoint playerWorldLocation = Microbot.getClient().getLocalPlayer().getWorldLocation();
                handleState();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }, 0, 600, TimeUnit.MILLISECONDS);
        return true;
    }
    public void onGameTick() {
    }
    public void shutdown() {
        Rs2Antiban.resetAntibanSettings();
        super.shutdown();
    }
    public void onChatMessage(ChatMessage event) {
    }
    public void onProfileChanged(ProfileChanged event) {
    }
    private int getSkillLevel(Skill skill) {
        return Microbot.getClient().getRealSkillLevel(skill);
    }
    private void handleState() {
          switch (currentState) {
            case INITIALIZE:
                initializeHunting();
                break;
            case SELECT_TASK:
                selectNewHunterTask();
                currentState = HunterState.GET_TASK;
                break;
            case GET_TASK:
                getNewHunterTask();
                currentState = HunterState.CHECK_REQUIREMENTS;
                break;
            case CHECK_REQUIREMENTS:
                if (checkHunterRequirements()) {
                    currentState = HunterState.NAVIGATE_TO_HUNT;
                } else {
                    currentState = HunterState.FINISHED;
                }
                break;
            case NAVIGATE_TO_HUNT:
                if (navigateToHuntingArea()) {
                    currentState = HunterState.PERFORM_HUNTING;
                }
                break;
            case PERFORM_HUNTING:
                performHunting(this.currentHuntingCreature);
                break;
            case CHECK_BREAK:
                break;
            case FINISHED:
                //stop();
                break;
        }
    }
    private void initializeHunting() {
        //if (config.huntingMode() == HuntersRumoursConfig.HuntingMode.HUNTER_RUMOURS) {
        //    rumoursTaskManager.initialize();
        //} else {
        //    classicHuntingManager.initialize(config.classicHuntingCreature());
        //}
    }
    private void performHunting(HunterCreature creature) {
        // Add logic to set traps, catch animals, and complete the task
        // This would include using the trap type in the specified location
    }
    private boolean checkHunterRequirements() {
        int hunterLevel = getSkillLevel(Skill.HUNTER);
        return true;
    }
    private boolean navigateToHuntingArea() {
        if (config.huntingMode() == HuntersRumoursConfig.HuntingMode.HUNTER_RUMOURS) {
            return rumoursTaskManager.navigateToHuntingArea();
        } else {
            return classicHuntingManager.navigateToHuntingArea();
        }
    }
    private void getNewHunterTask(HunterMaster master) {
        // Walk to the task master, only one step at a time
        //Microbot.getWalker().walkTo(master.getLocation());
        // Interact with the task master to get a new task (performed over multiple ticks)
        //interactWithTaskMaster(master);
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/navigation/VoxSylvaeNavigationOverlay.java
================
/*
 * Copyright (c) 2018, Seth <https://github.com/sethtroll>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.runelite.client.plugins.VoxSylvaePlugins.util.navigation;
import net.runelite.api.Client;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import javax.inject.Inject;
import java.awt.*;
import static net.runelite.api.Constants.CHUNK_SIZE;
public class VoxSylvaeNavigationOverlay extends OverlayPanel {
    private final Client client;
    //private final VoxSylvaeNavigationPlugin plugin;
    private final VoxSylvaeNavigationScript navigationScript;
    @Inject
    //VoxSylvaeNavigationOverlay(Client client, VoxSylvaeNavigationPlugin plugin, VoxSylvaeNavigationScript script) {
    VoxSylvaeNavigationOverlay(Client client, VoxSylvaeNavigationScript script) {
        this.client = client;        
        this.navigationScript = script;
        setPosition(OverlayPosition.TOP_LEFT);
        setLayer(OverlayLayer.ABOVE_SCENE);        
        setNaughty();
        setPosition(OverlayPosition.TOP_LEFT);
    }
    @Override
    public Dimension render(Graphics2D graphics) {
        //if (!navigationScript.getCurrentDesiredLocation()) {
         //   return null;
        //}
        WorldPoint worldPoint = client.getLocalPlayer().getWorldLocation();
        LocalPoint localPoint = client.getLocalPlayer().getLocalLocation();
        if (client.isInInstancedRegion()) {
            worldPoint = WorldPoint.fromLocalInstance(client, localPoint);
            panelComponent.getChildren().add(LineComponent.builder()
                    .left("Instance")
                    .build());
        }
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Local")
                .right(localPoint.getX() + ", " + localPoint.getY())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("World")
                .right(worldPoint.getX() + ", " + worldPoint.getY() + ", " + client.getPlane())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Region")
                .right(worldPoint.getRegionX() + ", " + worldPoint.getRegionY() + ", " + worldPoint.getRegionID())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Scene")
                .right(localPoint.getSceneX() + ", " + localPoint.getSceneY())
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Tile")
                .right(localPoint.getSceneX() / 128 + ", " + localPoint.getSceneY() / 128)
                .build());
        WorldPoint currentDesWorldPoint = navigationScript.getCurrentDesiredLocation();
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Desired Location")
                .right( currentDesWorldPoint.getX()+ ", " + currentDesWorldPoint.getY() + ", " + currentDesWorldPoint.getPlane())
                .build());
        int[][][] instanceTemplateChunks = client.getInstanceTemplateChunks();
        int z = client.getPlane();
        int chunkData = instanceTemplateChunks[z][localPoint.getSceneX() / CHUNK_SIZE][localPoint.getSceneY() / CHUNK_SIZE];
        int rotation = chunkData >> 1 & 0x3;
        int chunkY = (chunkData >> 3 & 0x7FF) * CHUNK_SIZE;
        int chunkX = (chunkData >> 14 & 0x3FF) * CHUNK_SIZE;
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Chunk " + localPoint.getSceneX() / CHUNK_SIZE + "," + localPoint.getSceneY() / CHUNK_SIZE)
                .right(rotation + " " + chunkX + " " + chunkY)
                .build());
        panelComponent.getChildren().add(LineComponent.builder()
                .left("Base")
                .right(client.getBaseX() + ", " + client.getBaseY())
                .build());
        for (int i = 0; i < client.getMapRegions().length; i++) {
            int region = client.getMapRegions()[i];
            int mx = region >> 8;
            int my = region & 0xff;
            panelComponent.getChildren().add(LineComponent.builder()
                    .left((i == 0) ? "Map regions" : " ")
                    .right(mx + ", " + my)
                    .rightColor((region == worldPoint.getRegionID()) ? Color.GREEN : Color.WHITE)
                    .build());
        }
        panelComponent.getChildren().add(LineComponent.builder()
                .left("State")
                .right(navigationScript.getNavigationState()+"")
                .rightColor( (navigationScript.getNavigationState() == VoxSylvaeNavigationScript.NavigationState.IDLE)? Color.GREEN:Color.RED )
                .build());
        return super.render(graphics);
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/navigation/VoxSylvaeNavigationScript.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.navigation;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.coords.WorldArea;
import net.runelite.api.Skill;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.util.magic.Rs2Magic;
import net.runelite.client.plugins.microbot.util.walker.Rs2Walker;
import net.runelite.client.plugins.microbot.util.gameobject.Rs2GameObject;
import net.runelite.client.plugins.microbot.util.inventory.Rs2Inventory;
import net.runelite.client.plugins.microbot.util.bank.Rs2Bank;
import net.runelite.client.plugins.microbot.util.player.Rs2Player;
import net.runelite.client.plugins.skillcalculator.skills.MagicAction;
import net.runelite.api.Skill;
import net.runelite.api.ItemComposition;
import net.runelite.api.ItemID;
import net.runelite.client.plugins.microbot.Script;
import net.runelite.client.plugins.microbot.util.keyboard.Rs2Keyboard;
import javax.inject.Inject;
import java.awt.event.KeyEvent;
import java.util.concurrent.TimeUnit;
import java.util.Random;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import static net.runelite.client.plugins.microbot.util.Global.sleep;
public class VoxSylvaeNavigationScript extends Script {
    enum NavigationState {
        IDLE,
        WALKING,
        TELEPORTING,
        BANKING,
        INTERACTING
    }
    private static Map<String, TeleportInfo> availableTeleports = new HashMap<>();
    private static final WorldPoint BANK_LOCATION = new WorldPoint(3183, 3436, 0); // Example: Varrock West Bank
    private NavigationState navigationState = NavigationState.IDLE;
    private WorldPoint currentDesiredLocation;
    public NavigationState getNavigationState() {
        return navigationState;
    }
    public WorldPoint getCurrentDesiredLocation() {
        return currentDesiredLocation;
    }
    public static void initialize() {
        loadAllTeleports();
        checkPlayerTeleports();
    }
    private static void loadAllTeleports() {
        // Add all possible teleports here
        availableTeleports.put("Varrock", new TeleportInfo(Rs2Magic.Spell.VARROCK_TELEPORT, new WorldPoint(3212, 3424, 0), 25, "Law rune", "Air rune", "Fire rune"));
        availableTeleports.put("Lumbridge", new TeleportInfo(Rs2Magic.Spell.LUMBRIDGE_TELEPORT, new WorldPoint(3225, 3219, 0), 31, "Law rune", "Air rune", "Earth rune"));
        availableTeleports.put("Falador", new TeleportInfo(Rs2Magic.Spell.FALADOR_TELEPORT, new WorldPoint(2964, 3379, 0), 37, "Law rune", "Air rune", "Water rune"));
        // Add more teleports as needed
    }
    private boolean hasAllItemsInInventory(List<String> items) {
        for (String item : items) {
            if (!Rs2Inventory.hasItem(item)) {
                return false;
            }
        }
        return true;
    }
    private void checkPlayerTeleports() {
        int magicLevel = getSkillLevel(Skill.MAGIC);
        for (Map.Entry<String, TeleportInfo> entry : availableTeleports.entrySet()) {
            TeleportInfo info = entry.getValue();
            if (magicLevel >= info.requiredLevel && hasAllItemsInInventory(info.requiredItems)) {
                info.isAvailable = true;
            }
        }
    }
    public boolean teleportToLocation(String teleportName, WorldPoint finalDestination) {
        TeleportInfo teleport = availableTeleports.get(teleportName);
        if (teleport != null && teleport.isAvailable) {
            Rs2Magic.castSpell(teleport.spell);
            sleep(3000, 4000);
            if (!Microbot.getClient().getLocalPlayer().getWorldLocation().equals(finalDestination)) {
                return walkTo(finalDestination,2);
            }
            return true;
        } else {
            System.out.println("Teleport not available: " + teleportName);
            return walkTo(finalDestination,2);
        }
    }
    public boolean walkTo(WorldPoint destination, int distance) {
        this.navigationState = NavigationState.WALKING;
        this.currentDesiredLocation = destination;
        mainScheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(() -> {
            try {
                Microbot.log("Walk todestination.");
                //Rs2Walker.walkTo(NORTH_OF_WEB, 2);
                //return sleepUntil(() -> Rs2Walker.getDistanceBetween(playerLocation, NORTH_OF_WEB) < 5 && !Rs2Player.isMoving(), 300);
                sleepUntil(() -> Rs2Walker.walkTo(destination, distance) && !Rs2Player.isMoving(), 300);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }, 0, 1000, TimeUnit.MILLISECONDS);
        //sleepUntil(() -> Rs2Walker.walkTo(destination, distance) && !Rs2Player.isMoving(), 300);
        this.navigationState = NavigationState.IDLE;
        return true;
    }
    public boolean walkToAreabyName(String  AreaName, int radius) {
        //notimplented yet
        assert false;
        WorldPoint destinationArea = NULL;
        return walkTo(destinationArea, radius);        
    }
    public static boolean useTransportation(String transportType, int objectId) {
        if (transportType.equals("Fairy Ring")) {
            Rs2GameObject fairyRing = Rs2GameObject.findObjectById(objectId);
            if (fairyRing != null) {
                return Rs2GameObject.interact(fairyRing, "Configure");
            }
        } else {
        mainScheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(() -> {
                Rs2GameObject transportObject = Rs2GameObject.findObjectById(objectId);
                if (transportObject != null) {
                    return Rs2GameObject.interact(transportObject, transportType);
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }, 0, 1000, TimeUnit.MILLISECONDS);  
        }
        return false;
    }
    public static boolean useItemOnObject(String itemName, int objectId) {
        if (Rs2Inventory.hasItem(itemName)) {
            Rs2GameObject targetObject = Rs2GameObject.findObjectById(objectId);
            if (targetObject != null) {
                Rs2Inventory.get(itemName).useOn(targetObject);
                return true;
            }
        }
        return false;
    }
    public boolean performTeleport(String teleportName) {
        navigationState = NavigationState.TELEPORTING;
        TeleportInfo teleport = availableTeleports.get(teleportName);
        if (teleport == null) {
            System.out.println("Unknown teleport: " + teleportName);
            navigationState = NavigationState.IDLE;
            return false;
        }
        List<String> missingItems = new ArrayList<>();
        for (String item : teleport.requiredItems) {
            if (!Rs2Inventory.hasItem(item)) {
                missingItems.add(item);
            }
        }
        if (!missingItems.isEmpty()) {
            navigationState = NavigationState.BANKING;
            // get missing items from bank not implemented yet
            assert false;
            navigationState = NavigationState.IDLE;
            return False
        }
        navigationState = NavigationState.IDLE;
        return true;
    }
    public boolean navigateToArea(String areaName) {
        WorldPoint currentLocation = Rs2Player.getWorldLocation();
        // logic for getting area location coordiantes
        if (currentLocation != null) {
            WorldPoint destinationArea = NULL;
            // First, try to teleport close to the destination
            //TODO implement this
            //TeleportationType nearestTeleport = findNearestTeleport(destination);
            //WorldPoint nearestTeleportationLocation
            //
            if (nearestTeleportationLocation != null) {
                return false
                //HunterMovementUtils.teleportToLocation(nearestTeleport, destination);
            }
            // Then, walk to the exact location
            return walkTo(destinationArea,0);
        }
        return false;
    }
    private int getSkillLevel(Skill skill) {
        return Microbot.getClient().getRealSkillLevel(skill);
    }
    private String findNearestTeleport(WorldPoint destination) {
        // Implement logic to find the nearest teleport to the destination
        // Return the teleport method name or null if no suitable teleport is found
        return null;
    }
    private static class TeleportInfo {
        MagicAction spell;
        WorldPoint destination;
        int requiredLevel;
        List<String> requiredItems;
        boolean isAvailable;
        TeleportInfo(MagicAction spell, WorldPoint destination, int requiredLevel, String... requiredItems) {
            this.spell = spell;
            this.destination = destination;
            this.requiredLevel = requiredLevel;
            this.requiredItems = requiredItems;
            this.isAvailable = false;
        }
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/teleport/FairyRingTeleport.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
import net.runelite.api.coords.WorldPoint;
public class FairyRingTeleport extends Teleport {
    private String code;
    private String notes;
    public FairyRingTeleport(String name, WorldPoint destination, String code, String notes) {
        super(name, destination, TeleportType.FAIRY_RING, 0, null, null);
        this.code = code;
        this.notes = notes;
    }
    public String getCode() { return code; }
    public String getNotes() { return notes; }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/teleport/ItemTeleport.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
import net.runelite.api.coords.WorldPoint;
public class ItemTeleport extends Teleport {
    private int itemId;
    private boolean consumable;
    public ItemTeleport(String name, WorldPoint destination, int itemId, boolean consumable) {
        super(name, destination, TeleportType.ITEM, 0, null, null);
        this.itemId = itemId;
        this.consumable = consumable;
    }
    public int getItemId() { return itemId; }
    public boolean isConsumable() { return consumable; }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/teleport/JewelryTeleport.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
import net.runelite.api.coords.WorldPoint;
import java.util.List;
public class JewelryTeleport extends Teleport {
    private int charges;
    private List<JewelryDestination> destinations;
    public JewelryTeleport(String name, int charges, List<JewelryDestination> destinations) {
        super(name, null, TeleportType.JEWELRY, 0, null, null);
        this.charges = charges;
        this.destinations = destinations;
    }
    public int getCharges() { return charges; }
    public List<JewelryDestination> getDestinations() { return destinations; }
    public static class JewelryDestination {
        private String name;
        private WorldPoint coordinates;
        private boolean membersOnly;
        public JewelryDestination(String name, WorldPoint coordinates, boolean membersOnly) {
            this.name = name;
            this.coordinates = coordinates;
            this.membersOnly = membersOnly;
        }
        public String getName() { return name; }
        public WorldPoint getCoordinates() { return coordinates; }
        public boolean isMembersOnly() { return membersOnly; }
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/teleport/POHTeleport.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
import net.runelite.api.coords.WorldPoint;
import java.util.List;
import java.util.Map;
public class POHTeleport extends Teleport {
    private String furniture;
    private Map<String, List<POHDestination>> teleports;
    public POHTeleport(String name, String furniture, Map<String, List<POHDestination>> teleports, int requiredLevel) {
        super(name, null, TeleportType.POH, requiredLevel, null, null);
        this.furniture = furniture;
        this.teleports = teleports;
    }
    public String getFurniture() { return furniture; }
    public Map<String, List<POHDestination>> getTeleports() { return teleports; }
    public static class POHDestination {
        private String name;
        private WorldPoint coordinates;
        public POHDestination(String name, WorldPoint coordinates) {
            this.name = name;
            this.coordinates = coordinates;
        }
        public String getName() { return name; }
        public WorldPoint getCoordinates() { return coordinates; }
    }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/teleport/Teleport.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
import net.runelite.api.coords.WorldPoint;
import java.util.List;
public class Teleport {
    private String name;
    private WorldPoint destination;
    private TeleportType type;
    private int requiredLevel;
    private List<String> requiredItems;
    private List<String> requiredQuests;
    public Teleport(String name, WorldPoint destination, TeleportType type, int requiredLevel, List<String> requiredItems, List<String> requiredQuests) {
        this.name = name;
        this.destination = destination;
        this.type = type;
        this.requiredLevel = requiredLevel;
        this.requiredItems = requiredItems;
        this.requiredQuests = requiredQuests;
    }
    // Getters
    public String getName() { return name; }
    public WorldPoint getDestination() { return destination; }
    public TeleportType getType() { return type; }
    public int getRequiredLevel() { return requiredLevel; }
    public List<String> getRequiredItems() { return requiredItems; }
    public List<String> getRequiredQuests() { return requiredQuests; }
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/teleport/TeleportType.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util.teleport;
public enum TeleportType {
    STANDARD_SPELLBOOK,
    ANCIENT_MAGICKS,
    ARCEUUS_SPELLBOOK,
    LUNAR_SPELLBOOK,
    JEWELRY,
    FAIRY_RING,
    POH,
    ITEM
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/TeleportationManager.java
================
package net.runelite.client.plugins.VoxSylvaePlugins.util;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.plugins.VoxSylvaePlugins.data.locationData.JewelryTeleport;
import net.runelite.client.plugins.VoxSylvaePlugins.util.teleport.*;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class TeleportationManager {
    private Map<TeleportType, List<Teleport>> teleports;
    public TeleportationManager() {
        teleports = new HashMap<>();
        loadTeleportData();
    }
    private void loadTeleportData() {
        loadStandardSpellbookTeleports();
        loadAncientMagicksTeleports();
        loadArceuusTeleports();
        loadLunarMagicTeleports();
        loadJewelryTeleports();
        loadFairyRingTeleports();
        loadPOHTeleports();
    }
    private void loadStandardSpellbookTeleports() {
        List<Teleport> standardTeleports = loadTeleportsFromFile("teleportationSpells.json");
        teleports.put(TeleportType.STANDARD_SPELLBOOK, standardTeleports);
    }
    private void loadAncientMagicksTeleports() {
        List<Teleport> ancientTeleports = loadTeleportsFromFile("ancientMagicksTeleports.json");
        teleports.put(TeleportType.ANCIENT_MAGICKS, ancientTeleports);
    }
    private void loadArceuusTeleports() {
        List<Teleport> arceuusTeleports = loadTeleportsFromFile("arceuusTeleports.json");
        teleports.put(TeleportType.ARCEUUS_SPELLBOOK, arceuusTeleports);
    }
    private void loadLunarMagicTeleports() {
        List<Teleport> lunarTeleports = loadTeleportsFromFile("lunarMagicTeleports.json");
        teleports.put(TeleportType.LUNAR_SPELLBOOK, lunarTeleports);
    }
    private void loadJewelryTeleports() {
        try (FileReader reader = new FileReader("../data/locationData/jewelryTeleports.json")) {
            Gson gson = new Gson();
            Type jewelryTeleportListType = new TypeToken<ArrayList<JewelryTeleport>>(){}.getType();
            List<JewelryTeleport> jewelryTeleports = gson.fromJson(reader, jewelryTeleportListType);
            teleports.put(TeleportType.JEWELRY, new ArrayList<>(jewelryTeleports));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void loadFairyRingTeleports() {
        try (FileReader reader = new FileReader("../data/locationData/fairyRingTeleports.json")) {
            Gson gson = new Gson();
            Type fairyRingTeleportListType = new TypeToken<ArrayList<FairyRingTeleport>>(){}.getType();
            List<FairyRingTeleport> fairyRingTeleports = gson.fromJson(reader, fairyRingTeleportListType);
            teleports.put(TeleportType.FAIRY_RING, new ArrayList<>(fairyRingTeleports));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void loadPOHTeleports() {
        try (FileReader reader = new FileReader("../data/locationData/POHTeleportOptions.json")) {
            Gson gson = new Gson();
            Type pohTeleportListType = new TypeToken<ArrayList<POHTeleport>>(){}.getType();
            List<POHTeleport> pohTeleports = gson.fromJson(reader, pohTeleportListType);
            teleports.put(TeleportType.POH, new ArrayList<>(pohTeleports));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public Teleport findNearestTeleport(WorldPoint destination) {
        Teleport nearest = null;
        double minDistance = Double.MAX_VALUE;
        for (List<Teleport> teleportList : teleports.values()) {
            for (Teleport teleport : teleportList) {
                double distance = teleport.getDistanceTo(destination);
                if (distance < minDistance) {
                    minDistance = distance;
                    nearest = teleport;
                }
            }
        }
        return nearest;
    }
    public Teleport findNearestTeleport(WorldPoint destination, TeleportType type) {
        List<Teleport> typeSpecificTeleports = teleports.get(type);
        if (typeSpecificTeleports == null) {
            return null;
        }
        return findNearestTeleportInList(destination, typeSpecificTeleports);
    }
    public Teleport findNearestTeleport(WorldPoint destination, List<String> completedQuests) {
        Teleport nearest = null;
        double minDistance = Double.MAX_VALUE;
        for (List<Teleport> teleportList : teleports.values()) {
            for (Teleport teleport : teleportList) {
                if (meetsQuestRequirements(teleport, completedQuests)) {
                    double distance = teleport.getDistanceTo(destination);
                    if (distance < minDistance) {
                        minDistance = distance;
                        nearest = teleport;
                    }
                }
            }
        }
        return nearest;
    }
    private Teleport findNearestTeleportInList(WorldPoint destination, List<Teleport> teleportList) {
        Teleport nearest = null;
        double minDistance = Double.MAX_VALUE;
        for (Teleport teleport : teleportList) {
            double distance = teleport.getDistanceTo(destination);
            if (distance < minDistance) {
                minDistance = distance;
                nearest = teleport;
            }
        }
        return nearest;
    }
    private boolean meetsQuestRequirements(Teleport teleport, List<String> completedQuests) {
        if (teleport.getRequiredQuests() == null || teleport.getRequiredQuests().isEmpty()) {
            return true;
        }
        return completedQuests.containsAll(teleport.getRequiredQuests());
    }
    // Add more methods as needed, such as filtering by requirements, etc.
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/VoxSylvaeInventoryManagementUtil.java
================
//package net.runelite.client.plugins.VoxSylvaePlugins.util;
import net.runelite.api.ItemID;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.util.Rs2InventorySetup;
import net.runelite.client.plugins.microbot.util.bank.Rs2Bank;
import net.runelite.client.plugins.microbot.util.equipment.Rs2Equipment;
import net.runelite.client.plugins.microbot.util.inventory.DropOrder;
import net.runelite.client.plugins.microbot.util.inventory.Rs2Inventory;
import net.runelite.client.plugins.microbot.util.player.Rs2Player;
import net.runelite.client.plugins.microbot.util.walker.Rs2Walker;
import java.util.List;
public void dropInventoryItems(DropOrder configuredDropOrder, String subStringItem ) {
    DropOrder dropOrder = configuredDropOrder == DropOrder.RANDOM ? DropOrder.random() : configuredDropOrder;
    Rs2Inventory.dropAll(x -> x.name.toLowerCase().contains(subStringItem), dropOrder);
}
private static boolean retrieveItemsFromBank(List<String> items, WorldPoint desiredBankLocation) {
        if (desiredBankLocation != null) {
            if (!walkTo(desiredBankLocation,2)) {
                System.out.println("Failed to reach the bank");
                return false;
            }    
        }
        if (!Rs2Bank.isOpen()) {
            Rs2Bank.walkToBankAndUseBank();
        }
        if (!Rs2Bank.open()) {
            System.out.println("Failed to open the bank");
            return false;
        }
        for (String item : items) {
            if (Rs2Bank.hasItem(item)) {
                Rs2Bank.withdrawAllItem(item);
            } else {
                System.out.println("Missing item in bank: " + item);
                Rs2Bank.close();
                return false;
            }
        }
        Rs2Bank.close();
        return true;
}
public boolean loadInventoryAndEquipment(String inventorySetupName, scheduledFuture<?> mainScheduledFuture) {
    rs2InventorySetup = new Rs2InventorySetup(inventorySetupName, mainScheduledFuture);
    if (!rs2InventorySetup.hasSpellBook()) {
        Microbot.showMessage("Your spellbook is not matching "+inventorySetupName+" the inventory setup.");
        sleep(10000);
        return;
    }
    hasEquipment = rs2InventorySetup.doesEquipmentMatch();
    hasInventory = rs2InventorySetup.doesInventoryMatch();
    if (!Rs2Bank.isOpen()) {
        Rs2Bank.walkToBankAndUseBank();
    }
    if (!hasEquipment) {
        hasEquipment = rs2InventorySetup.loadEquipment();
    }
    if (!hasInventory && rs2InventorySetup.doesEquipmentMatch()) {
        hasInventory = rs2InventorySetup.loadInventory();
        sleep(1000);
    }
    return hasInventory && hasEquipment;
}
private void checkBeforeWithdrawAndEquip(int itemId) {
    if (!Rs2Equipment.isWearing(itemId)) {
        Rs2Bank.withdrawAndEquip(itemId);
    }
}
public void equipGraceful() {
    checkBeforeWithdrawAndEquip("GRACEFUL HOOD");
    checkBeforeWithdrawAndEquip("GRACEFUL CAPE");
    checkBeforeWithdrawAndEquip("GRACEFUL BOOTS");
    checkBeforeWithdrawAndEquip("GRACEFUL GLOVES");
    checkBeforeWithdrawAndEquip("GRACEFUL TOP");
    checkBeforeWithdrawAndEquip("GRACEFUL LEGS");
}
public void withdrawDigsitePendant() {
    if (Rs2Bank.hasItem(ItemID.DIGSITE_PENDANT_1)) {
        checkBeforeWithdrawAndEquip(ItemID.DIGSITE_PENDANT_1);
    } else if (Rs2Bank.hasItem(ItemID.DIGSITE_PENDANT_2)) {
        checkBeforeWithdrawAndEquip(ItemID.DIGSITE_PENDANT_2);
    } else if (Rs2Bank.hasItem(ItemID.DIGSITE_PENDANT_3)) {
        checkBeforeWithdrawAndEquip(ItemID.DIGSITE_PENDANT_3);
    } else if (Rs2Bank.hasItem(ItemID.DIGSITE_PENDANT_4)) {
        checkBeforeWithdrawAndEquip(ItemID.DIGSITE_PENDANT_4);
    } else {
        checkBeforeWithdrawAndEquip(ItemID.DIGSITE_PENDANT_5);
    }
}
public static boolean retrieveItemsFromBank(List<String> items, WorldPoint desiredBankLocation) {
    if (desiredBankLocation != null) {
        if (!walkTo(desiredBankLocation)) {
            System.out.println("Failed to reach the bank");
            return false;
        }    
    }
    if (!Rs2Bank.isOpen()) {
        Rs2Bank.walkToBankAndUseBank();
    }
    if (!Rs2Bank.open()) {
        System.out.println("Failed to open the bank");
        return false;
    }
    for (String item : items) {
        if (Rs2Bank.hasItem(item)) {
            Rs2Bank.withdrawAllItem(item);
        } else {
            System.out.println("Missing item in bank: " + item);
            Rs2Bank.close();
            return false;
        }
    }
    Rs2Bank.close();
    return true;
}

================
File: runelite-client/src/main/java/net/runelite/client/plugins/VoxSylvaePlugins/util/VoxSylvaeUtil.java
================
//package net.runelite.client.plugins.VoxSylvaePlugins.util;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.plugins.hunter.HunterConfig;
import net.runelite.client.plugins.microbot.Microbot;
import net.runelite.client.plugins.microbot.util.antiban.AntibanOverlay;
import net.runelite.client.plugins.microbot.util.antiban.Rs2Antiban;
import net.runelite.client.plugins.microbot.util.antiban.Rs2AntibanSettings;
import net.runelite.client.plugins.microbot.util.inventory.Rs2Inventory;
import net.runelite.client.plugins.microbot.util.mouse.VirtualMouse;
import net.runelite.client.plugins.microbot.util.player.Rs2Player;
import net.runelite.client.plugins.xptracker.XpTrackerPlugin;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayPanel;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.components.LineComponent;
import net.runelite.client.ui.overlay.components.TitleComponent;
import net.runelite.api.AnimationID;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.Skill;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.StatChanged;
import net.runelite.client.Notifier;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ProfileChanged;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDependency;
import net.runelite.client.plugins.microbot.breakhandler.BreakHandlerPlugin;
import net.runelite.client.plugins.microbot.util.antiban.AntibanPlugin;
//import net.runelite.client.plugins.microbot.fishing.barbarian.BarbarianFishingConfig;
//import net.runelite.client.plugins.microbot.fishing.barbarian.BarbarianFishingScript;
import net.runelite.client.plugins.microbot.util.antiban.enums.Activity;
import net.runelite.client.plugins.microbot.util.antiban.enums.ActivityIntensity;
import net.runelite.client.plugins.microbot.util.antiban.enums.CombatSkills;
import net.runelite.client.plugins.microbot.util.antiban.ui.MasterPanel;
import net.runelite.client.plugins.PluginInstantiationException;
import net.runelite.client.ui.ClientToolbar;
import net.runelite.client.ui.NavigationButton;
import net.runelite.client.util.HotkeyListener;
import net.runelite.client.util.ImageUtil;
import javax.inject.Inject;
import javax.swing.*;
import com.google.inject.Provides;
import lombok.extern.slf4j.Slf4j;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.EnumMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.*;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
public void ensurePluginEnabled(Class pluginClass,  boolean devDebug){
    if (!Microbot.isPluginEnabled(pluginClass)) {
        String pluginName = pluginClass.getName();
        if (devDebug)
            Microbot.showMessage("AIO Hunter plugin depend on the plugin \""+pluginName +"\", enabling it now.");
        Microbot.log("\""+pluginName +"\""+"BreakHandlerPlugin not enabled, enabling it now.");
        Plugin PluginObject = Microbot.getPluginManager().getPlugins().stream()
                .filter(x -> x.getClass().getName().equals(pluginName))
                .findFirst()
                .orElse(null);
        Microbot.startPlugin(PluginObject);
    }
}
public static Plugin getPluginByNameByName(String pluginName) {
    for (Plugin plugin : Microbot.getPluginManager().getPlugins()) {
        PluginDescriptor descriptor = plugin.getClass().getAnnotation(PluginDescriptor.class);
        if (descriptor != null && descriptor.name().contains(pluginName)) {
            return plugin;
        }
    }
    return null;
}
public static String startPluginByName(String pluginName) {
        System.out.println("Starting startPlugin"); // Debug line
        try {
            Microbot.getPluginManager().setPluginEnabled(getPluginByName(pluginName), true);
            //sleep(100);
            Microbot.getPluginManager().startPlugins();
            //if (!(currentPluginName == null))
            //    lastPluginName = currentPluginName;
            //currentPluginName = pluginName;
            //activity = "running";
            //pluginStartTime = System.currentTimeMillis();
            System.out.println("started plugin: " + pluginName);
            return pluginName;
        } catch (Exception e) {
            System.out.println("Failed to start plugin: " + e.getMessage());
            return null;
        }
    }
public static void stopPluginByName(String pluginName) {
    try {
        Microbot.getPluginManager().setPluginEnabled(getPluginByName(pluginName), false);
        sleep(500);
        SwingUtilities.invokeLater(() -> {
            try {
                Microbot.getPluginManager().stopPlugin(getPluginByName(pluginName));
                System.out.println("stopped plugin: " + pluginName);
            } catch (PluginInstantiationException e) {
                System.out.println("error stopPlugin"); // Debug line
                throw new RuntimeException(e);
            }
        });
    } catch (Exception e) {
        System.out.println("Failed to stop plugin: " + e.getMessage());
    }
}
